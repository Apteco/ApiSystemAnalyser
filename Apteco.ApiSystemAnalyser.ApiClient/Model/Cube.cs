/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Information to request the calculating of a cube from FastStats based upon a query
    /// </summary>
    [DataContract]
    public partial class Cube :  IEquatable<Cube>
    {
        /// <summary>
        /// How the results of the cube will be returned
        /// </summary>
        /// <value>How the results of the cube will be returned</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StorageEnum
        {
            
            /// <summary>
            /// Enum Full for value: Full
            /// </summary>
            [EnumMember(Value = "Full")]
            Full = 1,
            
            /// <summary>
            /// Enum Sparse for value: Sparse
            /// </summary>
            [EnumMember(Value = "Sparse")]
            Sparse = 2
        }

        /// <summary>
        /// How the results of the cube will be returned
        /// </summary>
        /// <value>How the results of the cube will be returned</value>
        [DataMember(Name="storage", EmitDefaultValue=false)]
        public StorageEnum Storage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cube" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cube() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cube" /> class.
        /// </summary>
        /// <param name="BaseQuery">The query that defines the records to base this cube on (required).</param>
        /// <param name="ResolveTableName">The name of the table to resolve this cube to.  I.e. all the counts in the cube will be counts of entities from this table (required).</param>
        /// <param name="Storage">How the results of the cube will be returned (required).</param>
        /// <param name="Dimensions">The dimensions to build the cube with.  This can be one or more variables, queries, etc. (required).</param>
        /// <param name="Measures">The measures to build the cube with.  This can be one or more aggregations to calculate for the specified dimensions such as counts, sums, means, etc. (required).</param>
        public Cube(Query BaseQuery = default(Query), string ResolveTableName = default(string), StorageEnum Storage = default(StorageEnum), List<Dimension> Dimensions = default(List<Dimension>), List<Measure> Measures = default(List<Measure>))
        {
            // to ensure "BaseQuery" is required (not null)
            if (BaseQuery == null)
            {
                throw new InvalidDataException("BaseQuery is a required property for Cube and cannot be null");
            }
            else
            {
                this.BaseQuery = BaseQuery;
            }
            // to ensure "ResolveTableName" is required (not null)
            if (ResolveTableName == null)
            {
                throw new InvalidDataException("ResolveTableName is a required property for Cube and cannot be null");
            }
            else
            {
                this.ResolveTableName = ResolveTableName;
            }
            // to ensure "Storage" is required (not null)
            if (Storage == null)
            {
                throw new InvalidDataException("Storage is a required property for Cube and cannot be null");
            }
            else
            {
                this.Storage = Storage;
            }
            // to ensure "Dimensions" is required (not null)
            if (Dimensions == null)
            {
                throw new InvalidDataException("Dimensions is a required property for Cube and cannot be null");
            }
            else
            {
                this.Dimensions = Dimensions;
            }
            // to ensure "Measures" is required (not null)
            if (Measures == null)
            {
                throw new InvalidDataException("Measures is a required property for Cube and cannot be null");
            }
            else
            {
                this.Measures = Measures;
            }
        }
        
        /// <summary>
        /// The query that defines the records to base this cube on
        /// </summary>
        /// <value>The query that defines the records to base this cube on</value>
        [DataMember(Name="baseQuery", EmitDefaultValue=false)]
        public Query BaseQuery { get; set; }

        /// <summary>
        /// The name of the table to resolve this cube to.  I.e. all the counts in the cube will be counts of entities from this table
        /// </summary>
        /// <value>The name of the table to resolve this cube to.  I.e. all the counts in the cube will be counts of entities from this table</value>
        [DataMember(Name="resolveTableName", EmitDefaultValue=false)]
        public string ResolveTableName { get; set; }


        /// <summary>
        /// The dimensions to build the cube with.  This can be one or more variables, queries, etc.
        /// </summary>
        /// <value>The dimensions to build the cube with.  This can be one or more variables, queries, etc.</value>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public List<Dimension> Dimensions { get; set; }

        /// <summary>
        /// The measures to build the cube with.  This can be one or more aggregations to calculate for the specified dimensions such as counts, sums, means, etc.
        /// </summary>
        /// <value>The measures to build the cube with.  This can be one or more aggregations to calculate for the specified dimensions such as counts, sums, means, etc.</value>
        [DataMember(Name="measures", EmitDefaultValue=false)]
        public List<Measure> Measures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cube {\n");
            sb.Append("  BaseQuery: ").Append(BaseQuery).Append("\n");
            sb.Append("  ResolveTableName: ").Append(ResolveTableName).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Measures: ").Append(Measures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cube);
        }

        /// <summary>
        /// Returns true if Cube instances are equal
        /// </summary>
        /// <param name="input">Instance of Cube to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cube input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BaseQuery == input.BaseQuery ||
                    (this.BaseQuery != null &&
                    this.BaseQuery.Equals(input.BaseQuery))
                ) && 
                (
                    this.ResolveTableName == input.ResolveTableName ||
                    (this.ResolveTableName != null &&
                    this.ResolveTableName.Equals(input.ResolveTableName))
                ) && 
                (
                    this.Storage == input.Storage ||
                    (this.Storage != null &&
                    this.Storage.Equals(input.Storage))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                ) && 
                (
                    this.Measures == input.Measures ||
                    this.Measures != null &&
                    this.Measures.SequenceEqual(input.Measures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BaseQuery != null)
                    hashCode = hashCode * 59 + this.BaseQuery.GetHashCode();
                if (this.ResolveTableName != null)
                    hashCode = hashCode * 59 + this.ResolveTableName.GetHashCode();
                if (this.Storage != null)
                    hashCode = hashCode * 59 + this.Storage.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Measures != null)
                    hashCode = hashCode * 59 + this.Measures.GetHashCode();
                return hashCode;
            }
        }
    }

}

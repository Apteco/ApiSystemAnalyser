/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// A column to output for every row in the export
    /// </summary>
    [DataContract]
    public partial class Column :  IEquatable<Column>
    {
        /// <summary>
        /// Whether to output the codes or descriptions for this column when data is exported to a file
        /// </summary>
        /// <value>Whether to output the codes or descriptions for this column when data is exported to a file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DetailEnum
        {
            
            /// <summary>
            /// Enum Code for value: Code
            /// </summary>
            [EnumMember(Value = "Code")]
            Code = 1,
            
            /// <summary>
            /// Enum Description for value: Description
            /// </summary>
            [EnumMember(Value = "Description")]
            Description = 2
        }

        /// <summary>
        /// Whether to output the codes or descriptions for this column when data is exported to a file
        /// </summary>
        /// <value>Whether to output the codes or descriptions for this column when data is exported to a file</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public DetailEnum? Detail { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Column" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Column() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Column" /> class.
        /// </summary>
        /// <param name="Id">The id of the column (required).</param>
        /// <param name="VariableName">The variable to output in this column.</param>
        /// <param name="Query">A query to use to define the column.  Yes and No values will be returned for whether each row matches the query or not.</param>
        /// <param name="ColumnHeader">The text to use as the column header (required).</param>
        /// <param name="Detail">Whether to output the codes or descriptions for this column when data is exported to a file.</param>
        public Column(string Id = default(string), string VariableName = default(string), Query Query = default(Query), string ColumnHeader = default(string), DetailEnum? Detail = default(DetailEnum?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Column and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "ColumnHeader" is required (not null)
            if (ColumnHeader == null)
            {
                throw new InvalidDataException("ColumnHeader is a required property for Column and cannot be null");
            }
            else
            {
                this.ColumnHeader = ColumnHeader;
            }
            this.VariableName = VariableName;
            this.Query = Query;
            this.Detail = Detail;
        }
        
        /// <summary>
        /// The id of the column
        /// </summary>
        /// <value>The id of the column</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The variable to output in this column
        /// </summary>
        /// <value>The variable to output in this column</value>
        [DataMember(Name="variableName", EmitDefaultValue=false)]
        public string VariableName { get; set; }

        /// <summary>
        /// A query to use to define the column.  Yes and No values will be returned for whether each row matches the query or not
        /// </summary>
        /// <value>A query to use to define the column.  Yes and No values will be returned for whether each row matches the query or not</value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public Query Query { get; set; }

        /// <summary>
        /// The text to use as the column header
        /// </summary>
        /// <value>The text to use as the column header</value>
        [DataMember(Name="columnHeader", EmitDefaultValue=false)]
        public string ColumnHeader { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Column {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  ColumnHeader: ").Append(ColumnHeader).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Column);
        }

        /// <summary>
        /// Returns true if Column instances are equal
        /// </summary>
        /// <param name="input">Instance of Column to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Column input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VariableName == input.VariableName ||
                    (this.VariableName != null &&
                    this.VariableName.Equals(input.VariableName))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.ColumnHeader == input.ColumnHeader ||
                    (this.ColumnHeader != null &&
                    this.ColumnHeader.Equals(input.ColumnHeader))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.VariableName != null)
                    hashCode = hashCode * 59 + this.VariableName.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.ColumnHeader != null)
                    hashCode = hashCode * 59 + this.ColumnHeader.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                return hashCode;
            }
        }
    }

}

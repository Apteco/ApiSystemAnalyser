/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Lookup information for a variable and its var code descriptions returned in a result
    /// </summary>
    [DataContract]
    public partial class VariableLookup :  IEquatable<VariableLookup>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableLookup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VariableLookup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableLookup" /> class.
        /// </summary>
        /// <param name="VariableName">The name of the variable in question (required).</param>
        /// <param name="VariableDescription">The description of the variable in question.</param>
        /// <param name="VarCodesLookup">A partial list of var codes for the variable in question.</param>
        public VariableLookup(string VariableName = default(string), string VariableDescription = default(string), List<VarCode> VarCodesLookup = default(List<VarCode>))
        {
            // to ensure "VariableName" is required (not null)
            if (VariableName == null)
            {
                throw new InvalidDataException("VariableName is a required property for VariableLookup and cannot be null");
            }
            else
            {
                this.VariableName = VariableName;
            }
            this.VariableDescription = VariableDescription;
            this.VarCodesLookup = VarCodesLookup;
        }
        
        /// <summary>
        /// The name of the variable in question
        /// </summary>
        /// <value>The name of the variable in question</value>
        [DataMember(Name="variableName", EmitDefaultValue=false)]
        public string VariableName { get; set; }

        /// <summary>
        /// The description of the variable in question
        /// </summary>
        /// <value>The description of the variable in question</value>
        [DataMember(Name="variableDescription", EmitDefaultValue=false)]
        public string VariableDescription { get; set; }

        /// <summary>
        /// A partial list of var codes for the variable in question
        /// </summary>
        /// <value>A partial list of var codes for the variable in question</value>
        [DataMember(Name="varCodesLookup", EmitDefaultValue=false)]
        public List<VarCode> VarCodesLookup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariableLookup {\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  VariableDescription: ").Append(VariableDescription).Append("\n");
            sb.Append("  VarCodesLookup: ").Append(VarCodesLookup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariableLookup);
        }

        /// <summary>
        /// Returns true if VariableLookup instances are equal
        /// </summary>
        /// <param name="input">Instance of VariableLookup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariableLookup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VariableName == input.VariableName ||
                    (this.VariableName != null &&
                    this.VariableName.Equals(input.VariableName))
                ) && 
                (
                    this.VariableDescription == input.VariableDescription ||
                    (this.VariableDescription != null &&
                    this.VariableDescription.Equals(input.VariableDescription))
                ) && 
                (
                    this.VarCodesLookup == input.VarCodesLookup ||
                    this.VarCodesLookup != null &&
                    this.VarCodesLookup.SequenceEqual(input.VarCodesLookup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VariableName != null)
                    hashCode = hashCode * 59 + this.VariableName.GetHashCode();
                if (this.VariableDescription != null)
                    hashCode = hashCode * 59 + this.VariableDescription.GetHashCode();
                if (this.VarCodesLookup != null)
                    hashCode = hashCode * 59 + this.VarCodesLookup.GetHashCode();
                return hashCode;
            }
        }
    }

}

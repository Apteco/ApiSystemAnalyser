/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Details used to modify an existing list for a given user
    /// </summary>
    [DataContract]
    public partial class ModifyUserListDetail :  IEquatable<ModifyUserListDetail>
    {
        /// <summary>
        /// The status of the list
        /// </summary>
        /// <value>The status of the list</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,
            
            /// <summary>
            /// Enum Pinned for value: Pinned
            /// </summary>
            [EnumMember(Value = "Pinned")]
            Pinned = 2,
            
            /// <summary>
            /// Enum Archived for value: Archived
            /// </summary>
            [EnumMember(Value = "Archived")]
            Archived = 3
        }

        /// <summary>
        /// The status of the list
        /// </summary>
        /// <value>The status of the list</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyUserListDetail" /> class.
        /// </summary>
        /// <param name="Status">The status of the list.</param>
        /// <param name="Title">The title of the collection.</param>
        /// <param name="Description">The description of the collection.</param>
        /// <param name="BriefText">Notes associated with the list.</param>
        /// <param name="ExcludeQuery">The query rule that defines the records to exclude from this list.</param>
        /// <param name="IncludeQuery">The query rule that defines the records to start with when defining this list.</param>
        /// <param name="BodyQuery">The query rule that defines the records that will make up this list, after starting with the records defined by the include query (if specified) and then removing the records defined by the exclude query (if specified).</param>
        /// <param name="SelectionModifiers">A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries.</param>
        public ModifyUserListDetail(StatusEnum? Status = default(StatusEnum?), string Title = default(string), string Description = default(string), string BriefText = default(string), Query ExcludeQuery = default(Query), Query IncludeQuery = default(Query), Query BodyQuery = default(Query), SelectionModifiers SelectionModifiers = default(SelectionModifiers))
        {
            this.Status = Status;
            this.Title = Title;
            this.Description = Description;
            this.BriefText = BriefText;
            this.ExcludeQuery = ExcludeQuery;
            this.IncludeQuery = IncludeQuery;
            this.BodyQuery = BodyQuery;
            this.SelectionModifiers = SelectionModifiers;
        }
        

        /// <summary>
        /// The title of the collection
        /// </summary>
        /// <value>The title of the collection</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the collection
        /// </summary>
        /// <value>The description of the collection</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Notes associated with the list
        /// </summary>
        /// <value>Notes associated with the list</value>
        [DataMember(Name="briefText", EmitDefaultValue=false)]
        public string BriefText { get; set; }

        /// <summary>
        /// The query rule that defines the records to exclude from this list
        /// </summary>
        /// <value>The query rule that defines the records to exclude from this list</value>
        [DataMember(Name="excludeQuery", EmitDefaultValue=false)]
        public Query ExcludeQuery { get; set; }

        /// <summary>
        /// The query rule that defines the records to start with when defining this list
        /// </summary>
        /// <value>The query rule that defines the records to start with when defining this list</value>
        [DataMember(Name="includeQuery", EmitDefaultValue=false)]
        public Query IncludeQuery { get; set; }

        /// <summary>
        /// The query rule that defines the records that will make up this list, after starting with the records defined by the include query (if specified) and then removing the records defined by the exclude query (if specified)
        /// </summary>
        /// <value>The query rule that defines the records that will make up this list, after starting with the records defined by the include query (if specified) and then removing the records defined by the exclude query (if specified)</value>
        [DataMember(Name="bodyQuery", EmitDefaultValue=false)]
        public Query BodyQuery { get; set; }

        /// <summary>
        /// A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries
        /// </summary>
        /// <value>A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries</value>
        [DataMember(Name="selectionModifiers", EmitDefaultValue=false)]
        public SelectionModifiers SelectionModifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyUserListDetail {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BriefText: ").Append(BriefText).Append("\n");
            sb.Append("  ExcludeQuery: ").Append(ExcludeQuery).Append("\n");
            sb.Append("  IncludeQuery: ").Append(IncludeQuery).Append("\n");
            sb.Append("  BodyQuery: ").Append(BodyQuery).Append("\n");
            sb.Append("  SelectionModifiers: ").Append(SelectionModifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifyUserListDetail);
        }

        /// <summary>
        /// Returns true if ModifyUserListDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifyUserListDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyUserListDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.BriefText == input.BriefText ||
                    (this.BriefText != null &&
                    this.BriefText.Equals(input.BriefText))
                ) && 
                (
                    this.ExcludeQuery == input.ExcludeQuery ||
                    (this.ExcludeQuery != null &&
                    this.ExcludeQuery.Equals(input.ExcludeQuery))
                ) && 
                (
                    this.IncludeQuery == input.IncludeQuery ||
                    (this.IncludeQuery != null &&
                    this.IncludeQuery.Equals(input.IncludeQuery))
                ) && 
                (
                    this.BodyQuery == input.BodyQuery ||
                    (this.BodyQuery != null &&
                    this.BodyQuery.Equals(input.BodyQuery))
                ) && 
                (
                    this.SelectionModifiers == input.SelectionModifiers ||
                    (this.SelectionModifiers != null &&
                    this.SelectionModifiers.Equals(input.SelectionModifiers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.BriefText != null)
                    hashCode = hashCode * 59 + this.BriefText.GetHashCode();
                if (this.ExcludeQuery != null)
                    hashCode = hashCode * 59 + this.ExcludeQuery.GetHashCode();
                if (this.IncludeQuery != null)
                    hashCode = hashCode * 59 + this.IncludeQuery.GetHashCode();
                if (this.BodyQuery != null)
                    hashCode = hashCode * 59 + this.BodyQuery.GetHashCode();
                if (this.SelectionModifiers != null)
                    hashCode = hashCode * 59 + this.SelectionModifiers.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// The details required to generate a data export for a list
    /// </summary>
    [DataContract]
    public partial class ExportListDetails :  IEquatable<ExportListDetails>
    {
        /// <summary>
        /// If specified, the format of the file to export
        /// </summary>
        /// <value>If specified, the format of the file to export</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 1,
            
            /// <summary>
            /// Enum SDF for value: SDF
            /// </summary>
            [EnumMember(Value = "SDF")]
            SDF = 2,
            
            /// <summary>
            /// Enum XLSX for value: XLSX
            /// </summary>
            [EnumMember(Value = "XLSX")]
            XLSX = 3,
            
            /// <summary>
            /// Enum MDB for value: MDB
            /// </summary>
            [EnumMember(Value = "MDB")]
            MDB = 4,
            
            /// <summary>
            /// Enum DBF for value: DBF
            /// </summary>
            [EnumMember(Value = "DBF")]
            DBF = 5,
            
            /// <summary>
            /// Enum URN for value: URN
            /// </summary>
            [EnumMember(Value = "URN")]
            URN = 6
        }

        /// <summary>
        /// If specified, the format of the file to export
        /// </summary>
        /// <value>If specified, the format of the file to export</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportListDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportListDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportListDetails" /> class.
        /// </summary>
        /// <param name="MaximumNumberOfRowsToBrowse">The maximum number of rows to return when browsing the data (required).</param>
        /// <param name="ReturnBrowseRows">Whether to return data rows in the response or just export data to a file (required).</param>
        /// <param name="Filename">If specified, the filename of a file to create, containing the full export data.  The file will be created in the directory for the associated list, as configured in the API.</param>
        /// <param name="Format">If specified, the format of the file to export.</param>
        /// <param name="Columns">The list of columns to include in this export (required).</param>
        /// <param name="GenerateUrnFile">Whether to generate a URN file with this export or not (required).</param>
        public ExportListDetails(long? MaximumNumberOfRowsToBrowse = default(long?), bool? ReturnBrowseRows = default(bool?), string Filename = default(string), FormatEnum? Format = default(FormatEnum?), List<Column> Columns = default(List<Column>), bool? GenerateUrnFile = default(bool?))
        {
            // to ensure "MaximumNumberOfRowsToBrowse" is required (not null)
            if (MaximumNumberOfRowsToBrowse == null)
            {
                throw new InvalidDataException("MaximumNumberOfRowsToBrowse is a required property for ExportListDetails and cannot be null");
            }
            else
            {
                this.MaximumNumberOfRowsToBrowse = MaximumNumberOfRowsToBrowse;
            }
            // to ensure "ReturnBrowseRows" is required (not null)
            if (ReturnBrowseRows == null)
            {
                throw new InvalidDataException("ReturnBrowseRows is a required property for ExportListDetails and cannot be null");
            }
            else
            {
                this.ReturnBrowseRows = ReturnBrowseRows;
            }
            // to ensure "Columns" is required (not null)
            if (Columns == null)
            {
                throw new InvalidDataException("Columns is a required property for ExportListDetails and cannot be null");
            }
            else
            {
                this.Columns = Columns;
            }
            // to ensure "GenerateUrnFile" is required (not null)
            if (GenerateUrnFile == null)
            {
                throw new InvalidDataException("GenerateUrnFile is a required property for ExportListDetails and cannot be null");
            }
            else
            {
                this.GenerateUrnFile = GenerateUrnFile;
            }
            this.Filename = Filename;
            this.Format = Format;
        }
        
        /// <summary>
        /// The maximum number of rows to return when browsing the data
        /// </summary>
        /// <value>The maximum number of rows to return when browsing the data</value>
        [DataMember(Name="maximumNumberOfRowsToBrowse", EmitDefaultValue=false)]
        public long? MaximumNumberOfRowsToBrowse { get; set; }

        /// <summary>
        /// Whether to return data rows in the response or just export data to a file
        /// </summary>
        /// <value>Whether to return data rows in the response or just export data to a file</value>
        [DataMember(Name="returnBrowseRows", EmitDefaultValue=false)]
        public bool? ReturnBrowseRows { get; set; }

        /// <summary>
        /// If specified, the filename of a file to create, containing the full export data.  The file will be created in the directory for the associated list, as configured in the API
        /// </summary>
        /// <value>If specified, the filename of a file to create, containing the full export data.  The file will be created in the directory for the associated list, as configured in the API</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }


        /// <summary>
        /// The list of columns to include in this export
        /// </summary>
        /// <value>The list of columns to include in this export</value>
        [DataMember(Name="columns", EmitDefaultValue=false)]
        public List<Column> Columns { get; set; }

        /// <summary>
        /// Whether to generate a URN file with this export or not
        /// </summary>
        /// <value>Whether to generate a URN file with this export or not</value>
        [DataMember(Name="generateUrnFile", EmitDefaultValue=false)]
        public bool? GenerateUrnFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportListDetails {\n");
            sb.Append("  MaximumNumberOfRowsToBrowse: ").Append(MaximumNumberOfRowsToBrowse).Append("\n");
            sb.Append("  ReturnBrowseRows: ").Append(ReturnBrowseRows).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  GenerateUrnFile: ").Append(GenerateUrnFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportListDetails);
        }

        /// <summary>
        /// Returns true if ExportListDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportListDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportListDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaximumNumberOfRowsToBrowse == input.MaximumNumberOfRowsToBrowse ||
                    (this.MaximumNumberOfRowsToBrowse != null &&
                    this.MaximumNumberOfRowsToBrowse.Equals(input.MaximumNumberOfRowsToBrowse))
                ) && 
                (
                    this.ReturnBrowseRows == input.ReturnBrowseRows ||
                    (this.ReturnBrowseRows != null &&
                    this.ReturnBrowseRows.Equals(input.ReturnBrowseRows))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.GenerateUrnFile == input.GenerateUrnFile ||
                    (this.GenerateUrnFile != null &&
                    this.GenerateUrnFile.Equals(input.GenerateUrnFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaximumNumberOfRowsToBrowse != null)
                    hashCode = hashCode * 59 + this.MaximumNumberOfRowsToBrowse.GetHashCode();
                if (this.ReturnBrowseRows != null)
                    hashCode = hashCode * 59 + this.ReturnBrowseRows.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Columns != null)
                    hashCode = hashCode * 59 + this.Columns.GetHashCode();
                if (this.GenerateUrnFile != null)
                    hashCode = hashCode * 59 + this.GenerateUrnFile.GetHashCode();
                return hashCode;
            }
        }
    }

}

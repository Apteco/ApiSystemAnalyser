/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Details used to modify a list for a given user
    /// </summary>
    [DataContract]
    public partial class ModifyUserListDetailResults :  IEquatable<ModifyUserListDetailResults>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyUserListDetailResults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModifyUserListDetailResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyUserListDetailResults" /> class.
        /// </summary>
        /// <param name="List">The details of the modified list.</param>
        /// <param name="Id">The id of the updated item (required).</param>
        /// <param name="Succeeded">Whether the modification succeeded or not (required).</param>
        /// <param name="Status">A status message associated with the modification (required).</param>
        /// <param name="StatusCode">A status code associated with the modification (required).</param>
        public ModifyUserListDetailResults(UserListDetail List = default(UserListDetail), int? Id = default(int?), bool? Succeeded = default(bool?), string Status = default(string), int? StatusCode = default(int?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ModifyUserListDetailResults and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Succeeded" is required (not null)
            if (Succeeded == null)
            {
                throw new InvalidDataException("Succeeded is a required property for ModifyUserListDetailResults and cannot be null");
            }
            else
            {
                this.Succeeded = Succeeded;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for ModifyUserListDetailResults and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "StatusCode" is required (not null)
            if (StatusCode == null)
            {
                throw new InvalidDataException("StatusCode is a required property for ModifyUserListDetailResults and cannot be null");
            }
            else
            {
                this.StatusCode = StatusCode;
            }
            this.List = List;
        }
        
        /// <summary>
        /// The details of the modified list
        /// </summary>
        /// <value>The details of the modified list</value>
        [DataMember(Name="list", EmitDefaultValue=false)]
        public UserListDetail List { get; set; }

        /// <summary>
        /// The id of the updated item
        /// </summary>
        /// <value>The id of the updated item</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Whether the modification succeeded or not
        /// </summary>
        /// <value>Whether the modification succeeded or not</value>
        [DataMember(Name="succeeded", EmitDefaultValue=false)]
        public bool? Succeeded { get; set; }

        /// <summary>
        /// A status message associated with the modification
        /// </summary>
        /// <value>A status message associated with the modification</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// A status code associated with the modification
        /// </summary>
        /// <value>A status code associated with the modification</value>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyUserListDetailResults {\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifyUserListDetailResults);
        }

        /// <summary>
        /// Returns true if ModifyUserListDetailResults instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifyUserListDetailResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyUserListDetailResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.List == input.List ||
                    (this.List != null &&
                    this.List.Equals(input.List))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Succeeded == input.Succeeded ||
                    (this.Succeeded != null &&
                    this.Succeeded.Equals(input.Succeeded))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.List != null)
                    hashCode = hashCode * 59 + this.List.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Succeeded != null)
                    hashCode = hashCode * 59 + this.Succeeded.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Detail information for a list check
    /// </summary>
    [DataContract]
    public partial class ListCheckDetail :  IEquatable<ListCheckDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListCheckDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListCheckDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListCheckDetail" /> class.
        /// </summary>
        /// <param name="ListUpdateId">The id of the update (list version) that the export was created from (required).</param>
        /// <param name="Timestamp">The date and time that the export was produced (required).</param>
        /// <param name="FastStatsBuildDate">The date and time that the FastStats system used to create this export was built (required).</param>
        /// <param name="User">The user that triggered the export (required).</param>
        /// <param name="NettCounts">The set of overall counts for the list behind this export (required).</param>
        /// <param name="DimensionResults">The list of dimension results containing list and base counts (required).</param>
        public ListCheckDetail(int? ListUpdateId = default(int?), DateTime? Timestamp = default(DateTime?), DateTime? FastStatsBuildDate = default(DateTime?), UserDisplayDetails User = default(UserDisplayDetails), List<Count> NettCounts = default(List<Count>), List<CheckDimensionResult> DimensionResults = default(List<CheckDimensionResult>))
        {
            // to ensure "ListUpdateId" is required (not null)
            if (ListUpdateId == null)
            {
                throw new InvalidDataException("ListUpdateId is a required property for ListCheckDetail and cannot be null");
            }
            else
            {
                this.ListUpdateId = ListUpdateId;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for ListCheckDetail and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "FastStatsBuildDate" is required (not null)
            if (FastStatsBuildDate == null)
            {
                throw new InvalidDataException("FastStatsBuildDate is a required property for ListCheckDetail and cannot be null");
            }
            else
            {
                this.FastStatsBuildDate = FastStatsBuildDate;
            }
            // to ensure "User" is required (not null)
            if (User == null)
            {
                throw new InvalidDataException("User is a required property for ListCheckDetail and cannot be null");
            }
            else
            {
                this.User = User;
            }
            // to ensure "NettCounts" is required (not null)
            if (NettCounts == null)
            {
                throw new InvalidDataException("NettCounts is a required property for ListCheckDetail and cannot be null");
            }
            else
            {
                this.NettCounts = NettCounts;
            }
            // to ensure "DimensionResults" is required (not null)
            if (DimensionResults == null)
            {
                throw new InvalidDataException("DimensionResults is a required property for ListCheckDetail and cannot be null");
            }
            else
            {
                this.DimensionResults = DimensionResults;
            }
        }
        
        /// <summary>
        /// The id of the update (list version) that the export was created from
        /// </summary>
        /// <value>The id of the update (list version) that the export was created from</value>
        [DataMember(Name="listUpdateId", EmitDefaultValue=false)]
        public int? ListUpdateId { get; set; }

        /// <summary>
        /// The date and time that the export was produced
        /// </summary>
        /// <value>The date and time that the export was produced</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The date and time that the FastStats system used to create this export was built
        /// </summary>
        /// <value>The date and time that the FastStats system used to create this export was built</value>
        [DataMember(Name="fastStatsBuildDate", EmitDefaultValue=false)]
        public DateTime? FastStatsBuildDate { get; set; }

        /// <summary>
        /// The user that triggered the export
        /// </summary>
        /// <value>The user that triggered the export</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDisplayDetails User { get; set; }

        /// <summary>
        /// The set of overall counts for the list behind this export
        /// </summary>
        /// <value>The set of overall counts for the list behind this export</value>
        [DataMember(Name="nettCounts", EmitDefaultValue=false)]
        public List<Count> NettCounts { get; set; }

        /// <summary>
        /// The list of dimension results containing list and base counts
        /// </summary>
        /// <value>The list of dimension results containing list and base counts</value>
        [DataMember(Name="dimensionResults", EmitDefaultValue=false)]
        public List<CheckDimensionResult> DimensionResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListCheckDetail {\n");
            sb.Append("  ListUpdateId: ").Append(ListUpdateId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FastStatsBuildDate: ").Append(FastStatsBuildDate).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  NettCounts: ").Append(NettCounts).Append("\n");
            sb.Append("  DimensionResults: ").Append(DimensionResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListCheckDetail);
        }

        /// <summary>
        /// Returns true if ListCheckDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ListCheckDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListCheckDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListUpdateId == input.ListUpdateId ||
                    (this.ListUpdateId != null &&
                    this.ListUpdateId.Equals(input.ListUpdateId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.FastStatsBuildDate == input.FastStatsBuildDate ||
                    (this.FastStatsBuildDate != null &&
                    this.FastStatsBuildDate.Equals(input.FastStatsBuildDate))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.NettCounts == input.NettCounts ||
                    this.NettCounts != null &&
                    this.NettCounts.SequenceEqual(input.NettCounts)
                ) && 
                (
                    this.DimensionResults == input.DimensionResults ||
                    this.DimensionResults != null &&
                    this.DimensionResults.SequenceEqual(input.DimensionResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ListUpdateId != null)
                    hashCode = hashCode * 59 + this.ListUpdateId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.FastStatsBuildDate != null)
                    hashCode = hashCode * 59 + this.FastStatsBuildDate.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.NettCounts != null)
                    hashCode = hashCode * 59 + this.NettCounts.GetHashCode();
                if (this.DimensionResults != null)
                    hashCode = hashCode * 59 + this.DimensionResults.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Communication statistics for a given set of days
    /// </summary>
    [DataContract]
    public partial class ProcessingTimeStatistics :  IEquatable<ProcessingTimeStatistics>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessingTimeStatistics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessingTimeStatistics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessingTimeStatistics" /> class.
        /// </summary>
        /// <param name="Categories">The set of categories that the jobs have been broken down into (required).</param>
        /// <param name="Frequencies">The set of counts representing the number of jobs in each corresponding time period.  The first figure is data for the first category in the Categories list, and so on. (required).</param>
        /// <param name="MinimumDurationsInSeconds">The set of figures representing the minimum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        /// <param name="MaximumDurationsInSeconds">The set of figures representing the maximum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        /// <param name="MeanDurationsInSeconds">The set of figures representing the mean job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        /// <param name="StandardDeviationOfDurationsInSeconds">The set of figures representing the standard deviation for job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        /// <param name="MedianDurationsInSeconds">The set of figures representing the median job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        /// <param name="Percent75DurationsInSeconds">The set of figures representing the 75th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        /// <param name="Percent90DurationsInSeconds">The set of figures representing the 90th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        /// <param name="Percent95DurationsInSeconds">The set of figures representing the 95th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        /// <param name="Percent99DurationsInSeconds">The set of figures representing the 99th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on. (required).</param>
        public ProcessingTimeStatistics(List<string> Categories = default(List<string>), List<int?> Frequencies = default(List<int?>), List<double?> MinimumDurationsInSeconds = default(List<double?>), List<double?> MaximumDurationsInSeconds = default(List<double?>), List<double?> MeanDurationsInSeconds = default(List<double?>), List<double?> StandardDeviationOfDurationsInSeconds = default(List<double?>), List<double?> MedianDurationsInSeconds = default(List<double?>), List<double?> Percent75DurationsInSeconds = default(List<double?>), List<double?> Percent90DurationsInSeconds = default(List<double?>), List<double?> Percent95DurationsInSeconds = default(List<double?>), List<double?> Percent99DurationsInSeconds = default(List<double?>))
        {
            // to ensure "Categories" is required (not null)
            if (Categories == null)
            {
                throw new InvalidDataException("Categories is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.Categories = Categories;
            }
            // to ensure "Frequencies" is required (not null)
            if (Frequencies == null)
            {
                throw new InvalidDataException("Frequencies is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.Frequencies = Frequencies;
            }
            // to ensure "MinimumDurationsInSeconds" is required (not null)
            if (MinimumDurationsInSeconds == null)
            {
                throw new InvalidDataException("MinimumDurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.MinimumDurationsInSeconds = MinimumDurationsInSeconds;
            }
            // to ensure "MaximumDurationsInSeconds" is required (not null)
            if (MaximumDurationsInSeconds == null)
            {
                throw new InvalidDataException("MaximumDurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.MaximumDurationsInSeconds = MaximumDurationsInSeconds;
            }
            // to ensure "MeanDurationsInSeconds" is required (not null)
            if (MeanDurationsInSeconds == null)
            {
                throw new InvalidDataException("MeanDurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.MeanDurationsInSeconds = MeanDurationsInSeconds;
            }
            // to ensure "StandardDeviationOfDurationsInSeconds" is required (not null)
            if (StandardDeviationOfDurationsInSeconds == null)
            {
                throw new InvalidDataException("StandardDeviationOfDurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.StandardDeviationOfDurationsInSeconds = StandardDeviationOfDurationsInSeconds;
            }
            // to ensure "MedianDurationsInSeconds" is required (not null)
            if (MedianDurationsInSeconds == null)
            {
                throw new InvalidDataException("MedianDurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.MedianDurationsInSeconds = MedianDurationsInSeconds;
            }
            // to ensure "Percent75DurationsInSeconds" is required (not null)
            if (Percent75DurationsInSeconds == null)
            {
                throw new InvalidDataException("Percent75DurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.Percent75DurationsInSeconds = Percent75DurationsInSeconds;
            }
            // to ensure "Percent90DurationsInSeconds" is required (not null)
            if (Percent90DurationsInSeconds == null)
            {
                throw new InvalidDataException("Percent90DurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.Percent90DurationsInSeconds = Percent90DurationsInSeconds;
            }
            // to ensure "Percent95DurationsInSeconds" is required (not null)
            if (Percent95DurationsInSeconds == null)
            {
                throw new InvalidDataException("Percent95DurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.Percent95DurationsInSeconds = Percent95DurationsInSeconds;
            }
            // to ensure "Percent99DurationsInSeconds" is required (not null)
            if (Percent99DurationsInSeconds == null)
            {
                throw new InvalidDataException("Percent99DurationsInSeconds is a required property for ProcessingTimeStatistics and cannot be null");
            }
            else
            {
                this.Percent99DurationsInSeconds = Percent99DurationsInSeconds;
            }
        }
        
        /// <summary>
        /// The set of categories that the jobs have been broken down into
        /// </summary>
        /// <value>The set of categories that the jobs have been broken down into</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// The set of counts representing the number of jobs in each corresponding time period.  The first figure is data for the first category in the Categories list, and so on.
        /// </summary>
        /// <value>The set of counts representing the number of jobs in each corresponding time period.  The first figure is data for the first category in the Categories list, and so on.</value>
        [DataMember(Name="frequencies", EmitDefaultValue=false)]
        public List<int?> Frequencies { get; set; }

        /// <summary>
        /// The set of figures representing the minimum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the minimum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="minimumDurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> MinimumDurationsInSeconds { get; set; }

        /// <summary>
        /// The set of figures representing the maximum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the maximum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="maximumDurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> MaximumDurationsInSeconds { get; set; }

        /// <summary>
        /// The set of figures representing the mean job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the mean job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="meanDurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> MeanDurationsInSeconds { get; set; }

        /// <summary>
        /// The set of figures representing the standard deviation for job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the standard deviation for job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="standardDeviationOfDurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> StandardDeviationOfDurationsInSeconds { get; set; }

        /// <summary>
        /// The set of figures representing the median job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the median job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="medianDurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> MedianDurationsInSeconds { get; set; }

        /// <summary>
        /// The set of figures representing the 75th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the 75th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="percent75DurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> Percent75DurationsInSeconds { get; set; }

        /// <summary>
        /// The set of figures representing the 90th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the 90th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="percent90DurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> Percent90DurationsInSeconds { get; set; }

        /// <summary>
        /// The set of figures representing the 95th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the 95th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="percent95DurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> Percent95DurationsInSeconds { get; set; }

        /// <summary>
        /// The set of figures representing the 99th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.
        /// </summary>
        /// <value>The set of figures representing the 99th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.</value>
        [DataMember(Name="percent99DurationsInSeconds", EmitDefaultValue=false)]
        public List<double?> Percent99DurationsInSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessingTimeStatistics {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Frequencies: ").Append(Frequencies).Append("\n");
            sb.Append("  MinimumDurationsInSeconds: ").Append(MinimumDurationsInSeconds).Append("\n");
            sb.Append("  MaximumDurationsInSeconds: ").Append(MaximumDurationsInSeconds).Append("\n");
            sb.Append("  MeanDurationsInSeconds: ").Append(MeanDurationsInSeconds).Append("\n");
            sb.Append("  StandardDeviationOfDurationsInSeconds: ").Append(StandardDeviationOfDurationsInSeconds).Append("\n");
            sb.Append("  MedianDurationsInSeconds: ").Append(MedianDurationsInSeconds).Append("\n");
            sb.Append("  Percent75DurationsInSeconds: ").Append(Percent75DurationsInSeconds).Append("\n");
            sb.Append("  Percent90DurationsInSeconds: ").Append(Percent90DurationsInSeconds).Append("\n");
            sb.Append("  Percent95DurationsInSeconds: ").Append(Percent95DurationsInSeconds).Append("\n");
            sb.Append("  Percent99DurationsInSeconds: ").Append(Percent99DurationsInSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessingTimeStatistics);
        }

        /// <summary>
        /// Returns true if ProcessingTimeStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessingTimeStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessingTimeStatistics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Frequencies == input.Frequencies ||
                    this.Frequencies != null &&
                    this.Frequencies.SequenceEqual(input.Frequencies)
                ) && 
                (
                    this.MinimumDurationsInSeconds == input.MinimumDurationsInSeconds ||
                    this.MinimumDurationsInSeconds != null &&
                    this.MinimumDurationsInSeconds.SequenceEqual(input.MinimumDurationsInSeconds)
                ) && 
                (
                    this.MaximumDurationsInSeconds == input.MaximumDurationsInSeconds ||
                    this.MaximumDurationsInSeconds != null &&
                    this.MaximumDurationsInSeconds.SequenceEqual(input.MaximumDurationsInSeconds)
                ) && 
                (
                    this.MeanDurationsInSeconds == input.MeanDurationsInSeconds ||
                    this.MeanDurationsInSeconds != null &&
                    this.MeanDurationsInSeconds.SequenceEqual(input.MeanDurationsInSeconds)
                ) && 
                (
                    this.StandardDeviationOfDurationsInSeconds == input.StandardDeviationOfDurationsInSeconds ||
                    this.StandardDeviationOfDurationsInSeconds != null &&
                    this.StandardDeviationOfDurationsInSeconds.SequenceEqual(input.StandardDeviationOfDurationsInSeconds)
                ) && 
                (
                    this.MedianDurationsInSeconds == input.MedianDurationsInSeconds ||
                    this.MedianDurationsInSeconds != null &&
                    this.MedianDurationsInSeconds.SequenceEqual(input.MedianDurationsInSeconds)
                ) && 
                (
                    this.Percent75DurationsInSeconds == input.Percent75DurationsInSeconds ||
                    this.Percent75DurationsInSeconds != null &&
                    this.Percent75DurationsInSeconds.SequenceEqual(input.Percent75DurationsInSeconds)
                ) && 
                (
                    this.Percent90DurationsInSeconds == input.Percent90DurationsInSeconds ||
                    this.Percent90DurationsInSeconds != null &&
                    this.Percent90DurationsInSeconds.SequenceEqual(input.Percent90DurationsInSeconds)
                ) && 
                (
                    this.Percent95DurationsInSeconds == input.Percent95DurationsInSeconds ||
                    this.Percent95DurationsInSeconds != null &&
                    this.Percent95DurationsInSeconds.SequenceEqual(input.Percent95DurationsInSeconds)
                ) && 
                (
                    this.Percent99DurationsInSeconds == input.Percent99DurationsInSeconds ||
                    this.Percent99DurationsInSeconds != null &&
                    this.Percent99DurationsInSeconds.SequenceEqual(input.Percent99DurationsInSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Frequencies != null)
                    hashCode = hashCode * 59 + this.Frequencies.GetHashCode();
                if (this.MinimumDurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.MinimumDurationsInSeconds.GetHashCode();
                if (this.MaximumDurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.MaximumDurationsInSeconds.GetHashCode();
                if (this.MeanDurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.MeanDurationsInSeconds.GetHashCode();
                if (this.StandardDeviationOfDurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.StandardDeviationOfDurationsInSeconds.GetHashCode();
                if (this.MedianDurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.MedianDurationsInSeconds.GetHashCode();
                if (this.Percent75DurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.Percent75DurationsInSeconds.GetHashCode();
                if (this.Percent90DurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.Percent90DurationsInSeconds.GetHashCode();
                if (this.Percent95DurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.Percent95DurationsInSeconds.GetHashCode();
                if (this.Percent99DurationsInSeconds != null)
                    hashCode = hashCode * 59 + this.Percent99DurationsInSeconds.GetHashCode();
                return hashCode;
            }
        }
    }

}

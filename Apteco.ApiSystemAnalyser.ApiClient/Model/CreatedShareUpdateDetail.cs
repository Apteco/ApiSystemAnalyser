/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Details about the creation of a new share update
    /// </summary>
    [DataContract]
    public partial class CreatedShareUpdateDetail :  IEquatable<CreatedShareUpdateDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatedShareUpdateDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatedShareUpdateDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatedShareUpdateDetail" /> class.
        /// </summary>
        /// <param name="ShareUpdate">The details of the newly created share update (required).</param>
        /// <param name="InvalidUsersToAdd">Details of the users that were specified to be added to the  share in the update, but that were not valid users to be shared to (required).</param>
        /// <param name="InvalidUsersToRemove">Details of the users that were specified to be removed from the  share in the update, but that were not valid users to be removed from  sharing the shareable item (required).</param>
        public CreatedShareUpdateDetail(ShareUpdate ShareUpdate = default(ShareUpdate), List<InvalidToShareUserDisplayDetails> InvalidUsersToAdd = default(List<InvalidToShareUserDisplayDetails>), List<InvalidToShareUserDisplayDetails> InvalidUsersToRemove = default(List<InvalidToShareUserDisplayDetails>))
        {
            // to ensure "ShareUpdate" is required (not null)
            if (ShareUpdate == null)
            {
                throw new InvalidDataException("ShareUpdate is a required property for CreatedShareUpdateDetail and cannot be null");
            }
            else
            {
                this.ShareUpdate = ShareUpdate;
            }
            // to ensure "InvalidUsersToAdd" is required (not null)
            if (InvalidUsersToAdd == null)
            {
                throw new InvalidDataException("InvalidUsersToAdd is a required property for CreatedShareUpdateDetail and cannot be null");
            }
            else
            {
                this.InvalidUsersToAdd = InvalidUsersToAdd;
            }
            // to ensure "InvalidUsersToRemove" is required (not null)
            if (InvalidUsersToRemove == null)
            {
                throw new InvalidDataException("InvalidUsersToRemove is a required property for CreatedShareUpdateDetail and cannot be null");
            }
            else
            {
                this.InvalidUsersToRemove = InvalidUsersToRemove;
            }
        }
        
        /// <summary>
        /// The details of the newly created share update
        /// </summary>
        /// <value>The details of the newly created share update</value>
        [DataMember(Name="shareUpdate", EmitDefaultValue=false)]
        public ShareUpdate ShareUpdate { get; set; }

        /// <summary>
        /// Details of the users that were specified to be added to the  share in the update, but that were not valid users to be shared to
        /// </summary>
        /// <value>Details of the users that were specified to be added to the  share in the update, but that were not valid users to be shared to</value>
        [DataMember(Name="invalidUsersToAdd", EmitDefaultValue=false)]
        public List<InvalidToShareUserDisplayDetails> InvalidUsersToAdd { get; set; }

        /// <summary>
        /// Details of the users that were specified to be removed from the  share in the update, but that were not valid users to be removed from  sharing the shareable item
        /// </summary>
        /// <value>Details of the users that were specified to be removed from the  share in the update, but that were not valid users to be removed from  sharing the shareable item</value>
        [DataMember(Name="invalidUsersToRemove", EmitDefaultValue=false)]
        public List<InvalidToShareUserDisplayDetails> InvalidUsersToRemove { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatedShareUpdateDetail {\n");
            sb.Append("  ShareUpdate: ").Append(ShareUpdate).Append("\n");
            sb.Append("  InvalidUsersToAdd: ").Append(InvalidUsersToAdd).Append("\n");
            sb.Append("  InvalidUsersToRemove: ").Append(InvalidUsersToRemove).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatedShareUpdateDetail);
        }

        /// <summary>
        /// Returns true if CreatedShareUpdateDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatedShareUpdateDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatedShareUpdateDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShareUpdate == input.ShareUpdate ||
                    (this.ShareUpdate != null &&
                    this.ShareUpdate.Equals(input.ShareUpdate))
                ) && 
                (
                    this.InvalidUsersToAdd == input.InvalidUsersToAdd ||
                    this.InvalidUsersToAdd != null &&
                    this.InvalidUsersToAdd.SequenceEqual(input.InvalidUsersToAdd)
                ) && 
                (
                    this.InvalidUsersToRemove == input.InvalidUsersToRemove ||
                    this.InvalidUsersToRemove != null &&
                    this.InvalidUsersToRemove.SequenceEqual(input.InvalidUsersToRemove)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShareUpdate != null)
                    hashCode = hashCode * 59 + this.ShareUpdate.GetHashCode();
                if (this.InvalidUsersToAdd != null)
                    hashCode = hashCode * 59 + this.InvalidUsersToAdd.GetHashCode();
                if (this.InvalidUsersToRemove != null)
                    hashCode = hashCode * 59 + this.InvalidUsersToRemove.GetHashCode();
                return hashCode;
            }
        }
    }

}

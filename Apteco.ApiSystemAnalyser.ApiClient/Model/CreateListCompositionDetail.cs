/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Details for creating a composition
    /// </summary>
    [DataContract]
    public partial class CreateListCompositionDetail :  IEquatable<CreateListCompositionDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateListCompositionDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateListCompositionDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateListCompositionDetail" /> class.
        /// </summary>
        /// <param name="Description">The description to use for the new composition (required).</param>
        /// <param name="CheckCompositionDefinition">The definition to use if this is to create a list check composition.</param>
        /// <param name="ExportCompositionDefinition">The definition to use if this is to create a list export composition.</param>
        public CreateListCompositionDetail(string Description = default(string), CheckCompositionDefinition CheckCompositionDefinition = default(CheckCompositionDefinition), ExportCompositionDefinition ExportCompositionDefinition = default(ExportCompositionDefinition))
        {
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for CreateListCompositionDetail and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            this.CheckCompositionDefinition = CheckCompositionDefinition;
            this.ExportCompositionDefinition = ExportCompositionDefinition;
        }
        
        /// <summary>
        /// The description to use for the new composition
        /// </summary>
        /// <value>The description to use for the new composition</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The definition to use if this is to create a list check composition
        /// </summary>
        /// <value>The definition to use if this is to create a list check composition</value>
        [DataMember(Name="checkCompositionDefinition", EmitDefaultValue=false)]
        public CheckCompositionDefinition CheckCompositionDefinition { get; set; }

        /// <summary>
        /// The definition to use if this is to create a list export composition
        /// </summary>
        /// <value>The definition to use if this is to create a list export composition</value>
        [DataMember(Name="exportCompositionDefinition", EmitDefaultValue=false)]
        public ExportCompositionDefinition ExportCompositionDefinition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateListCompositionDetail {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CheckCompositionDefinition: ").Append(CheckCompositionDefinition).Append("\n");
            sb.Append("  ExportCompositionDefinition: ").Append(ExportCompositionDefinition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateListCompositionDetail);
        }

        /// <summary>
        /// Returns true if CreateListCompositionDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateListCompositionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateListCompositionDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CheckCompositionDefinition == input.CheckCompositionDefinition ||
                    (this.CheckCompositionDefinition != null &&
                    this.CheckCompositionDefinition.Equals(input.CheckCompositionDefinition))
                ) && 
                (
                    this.ExportCompositionDefinition == input.ExportCompositionDefinition ||
                    (this.ExportCompositionDefinition != null &&
                    this.ExportCompositionDefinition.Equals(input.ExportCompositionDefinition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CheckCompositionDefinition != null)
                    hashCode = hashCode * 59 + this.CheckCompositionDefinition.GetHashCode();
                if (this.ExportCompositionDefinition != null)
                    hashCode = hashCode * 59 + this.ExportCompositionDefinition.GetHashCode();
                return hashCode;
            }
        }
    }

}

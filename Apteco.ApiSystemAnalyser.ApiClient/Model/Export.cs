/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Information to request the exporting data from FastStats based upon a query
    /// </summary>
    [DataContract]
    public partial class Export :  IEquatable<Export>
    {
        /// <summary>
        /// If this export is exporting to a file, the format of the file to generate
        /// </summary>
        /// <value>If this export is exporting to a file, the format of the file to generate</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputFormatEnum
        {
            
            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 1,
            
            /// <summary>
            /// Enum SDF for value: SDF
            /// </summary>
            [EnumMember(Value = "SDF")]
            SDF = 2,
            
            /// <summary>
            /// Enum XLSX for value: XLSX
            /// </summary>
            [EnumMember(Value = "XLSX")]
            XLSX = 3,
            
            /// <summary>
            /// Enum MDB for value: MDB
            /// </summary>
            [EnumMember(Value = "MDB")]
            MDB = 4,
            
            /// <summary>
            /// Enum DBF for value: DBF
            /// </summary>
            [EnumMember(Value = "DBF")]
            DBF = 5,
            
            /// <summary>
            /// Enum URN for value: URN
            /// </summary>
            [EnumMember(Value = "URN")]
            URN = 6
        }

        /// <summary>
        /// If this export is exporting to a file, the format of the file to generate
        /// </summary>
        /// <value>If this export is exporting to a file, the format of the file to generate</value>
        [DataMember(Name="outputFormat", EmitDefaultValue=false)]
        public OutputFormatEnum? OutputFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Export" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Export() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Export" /> class.
        /// </summary>
        /// <param name="BaseQuery">The query that defines the records to base this export on (required).</param>
        /// <param name="ResolveTableName">The name of the table to resolve this export to.  I.e. each row will correspond to one record from this table (required).</param>
        /// <param name="MaximumNumberOfRowsToBrowse">The maximum number of rows to return in the browse results (required).</param>
        /// <param name="ReturnBrowseRows">Whether to output browse rows as well as generating a file (required).</param>
        /// <param name="PathToExportTo">The path of the file to export results to.</param>
        /// <param name="OutputFormat">If this export is exporting to a file, the format of the file to generate.</param>
        /// <param name="Columns">The name of the table to resolve this export to.  I.e. each row will correspond to one record from this table (required).</param>
        /// <param name="Limits">Further limits to apply to the export on top of the base query.</param>
        public Export(Query BaseQuery = default(Query), string ResolveTableName = default(string), long? MaximumNumberOfRowsToBrowse = default(long?), bool? ReturnBrowseRows = default(bool?), string PathToExportTo = default(string), OutputFormatEnum? OutputFormat = default(OutputFormatEnum?), List<Column> Columns = default(List<Column>), Limits Limits = default(Limits))
        {
            // to ensure "BaseQuery" is required (not null)
            if (BaseQuery == null)
            {
                throw new InvalidDataException("BaseQuery is a required property for Export and cannot be null");
            }
            else
            {
                this.BaseQuery = BaseQuery;
            }
            // to ensure "ResolveTableName" is required (not null)
            if (ResolveTableName == null)
            {
                throw new InvalidDataException("ResolveTableName is a required property for Export and cannot be null");
            }
            else
            {
                this.ResolveTableName = ResolveTableName;
            }
            // to ensure "MaximumNumberOfRowsToBrowse" is required (not null)
            if (MaximumNumberOfRowsToBrowse == null)
            {
                throw new InvalidDataException("MaximumNumberOfRowsToBrowse is a required property for Export and cannot be null");
            }
            else
            {
                this.MaximumNumberOfRowsToBrowse = MaximumNumberOfRowsToBrowse;
            }
            // to ensure "ReturnBrowseRows" is required (not null)
            if (ReturnBrowseRows == null)
            {
                throw new InvalidDataException("ReturnBrowseRows is a required property for Export and cannot be null");
            }
            else
            {
                this.ReturnBrowseRows = ReturnBrowseRows;
            }
            // to ensure "Columns" is required (not null)
            if (Columns == null)
            {
                throw new InvalidDataException("Columns is a required property for Export and cannot be null");
            }
            else
            {
                this.Columns = Columns;
            }
            this.PathToExportTo = PathToExportTo;
            this.OutputFormat = OutputFormat;
            this.Limits = Limits;
        }
        
        /// <summary>
        /// The query that defines the records to base this export on
        /// </summary>
        /// <value>The query that defines the records to base this export on</value>
        [DataMember(Name="baseQuery", EmitDefaultValue=false)]
        public Query BaseQuery { get; set; }

        /// <summary>
        /// The name of the table to resolve this export to.  I.e. each row will correspond to one record from this table
        /// </summary>
        /// <value>The name of the table to resolve this export to.  I.e. each row will correspond to one record from this table</value>
        [DataMember(Name="resolveTableName", EmitDefaultValue=false)]
        public string ResolveTableName { get; set; }

        /// <summary>
        /// The maximum number of rows to return in the browse results
        /// </summary>
        /// <value>The maximum number of rows to return in the browse results</value>
        [DataMember(Name="maximumNumberOfRowsToBrowse", EmitDefaultValue=false)]
        public long? MaximumNumberOfRowsToBrowse { get; set; }

        /// <summary>
        /// Whether to output browse rows as well as generating a file
        /// </summary>
        /// <value>Whether to output browse rows as well as generating a file</value>
        [DataMember(Name="returnBrowseRows", EmitDefaultValue=false)]
        public bool? ReturnBrowseRows { get; set; }

        /// <summary>
        /// The path of the file to export results to
        /// </summary>
        /// <value>The path of the file to export results to</value>
        [DataMember(Name="pathToExportTo", EmitDefaultValue=false)]
        public string PathToExportTo { get; set; }


        /// <summary>
        /// The name of the table to resolve this export to.  I.e. each row will correspond to one record from this table
        /// </summary>
        /// <value>The name of the table to resolve this export to.  I.e. each row will correspond to one record from this table</value>
        [DataMember(Name="columns", EmitDefaultValue=false)]
        public List<Column> Columns { get; set; }

        /// <summary>
        /// Further limits to apply to the export on top of the base query
        /// </summary>
        /// <value>Further limits to apply to the export on top of the base query</value>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public Limits Limits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Export {\n");
            sb.Append("  BaseQuery: ").Append(BaseQuery).Append("\n");
            sb.Append("  ResolveTableName: ").Append(ResolveTableName).Append("\n");
            sb.Append("  MaximumNumberOfRowsToBrowse: ").Append(MaximumNumberOfRowsToBrowse).Append("\n");
            sb.Append("  ReturnBrowseRows: ").Append(ReturnBrowseRows).Append("\n");
            sb.Append("  PathToExportTo: ").Append(PathToExportTo).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Export);
        }

        /// <summary>
        /// Returns true if Export instances are equal
        /// </summary>
        /// <param name="input">Instance of Export to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Export input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BaseQuery == input.BaseQuery ||
                    (this.BaseQuery != null &&
                    this.BaseQuery.Equals(input.BaseQuery))
                ) && 
                (
                    this.ResolveTableName == input.ResolveTableName ||
                    (this.ResolveTableName != null &&
                    this.ResolveTableName.Equals(input.ResolveTableName))
                ) && 
                (
                    this.MaximumNumberOfRowsToBrowse == input.MaximumNumberOfRowsToBrowse ||
                    (this.MaximumNumberOfRowsToBrowse != null &&
                    this.MaximumNumberOfRowsToBrowse.Equals(input.MaximumNumberOfRowsToBrowse))
                ) && 
                (
                    this.ReturnBrowseRows == input.ReturnBrowseRows ||
                    (this.ReturnBrowseRows != null &&
                    this.ReturnBrowseRows.Equals(input.ReturnBrowseRows))
                ) && 
                (
                    this.PathToExportTo == input.PathToExportTo ||
                    (this.PathToExportTo != null &&
                    this.PathToExportTo.Equals(input.PathToExportTo))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    (this.OutputFormat != null &&
                    this.OutputFormat.Equals(input.OutputFormat))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Limits == input.Limits ||
                    (this.Limits != null &&
                    this.Limits.Equals(input.Limits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BaseQuery != null)
                    hashCode = hashCode * 59 + this.BaseQuery.GetHashCode();
                if (this.ResolveTableName != null)
                    hashCode = hashCode * 59 + this.ResolveTableName.GetHashCode();
                if (this.MaximumNumberOfRowsToBrowse != null)
                    hashCode = hashCode * 59 + this.MaximumNumberOfRowsToBrowse.GetHashCode();
                if (this.ReturnBrowseRows != null)
                    hashCode = hashCode * 59 + this.ReturnBrowseRows.GetHashCode();
                if (this.PathToExportTo != null)
                    hashCode = hashCode * 59 + this.PathToExportTo.GetHashCode();
                if (this.OutputFormat != null)
                    hashCode = hashCode * 59 + this.OutputFormat.GetHashCode();
                if (this.Columns != null)
                    hashCode = hashCode * 59 + this.Columns.GetHashCode();
                if (this.Limits != null)
                    hashCode = hashCode * 59 + this.Limits.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Expression
    /// </summary>
    [DataContract]
    public partial class Expression :  IEquatable<Expression>
    {
        /// <summary>
        /// Defines OutputType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputTypeEnum
        {
            
            /// <summary>
            /// Enum Double for value: Double
            /// </summary>
            [EnumMember(Value = "Double")]
            Double = 1,
            
            /// <summary>
            /// Enum Integer for value: Integer
            /// </summary>
            [EnumMember(Value = "Integer")]
            Integer = 2,
            
            /// <summary>
            /// Enum String for value: String
            /// </summary>
            [EnumMember(Value = "String")]
            String = 3,
            
            /// <summary>
            /// Enum Date for value: Date
            /// </summary>
            [EnumMember(Value = "Date")]
            Date = 4,
            
            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 5,
            
            /// <summary>
            /// Enum Selector for value: Selector
            /// </summary>
            [EnumMember(Value = "Selector")]
            Selector = 6
        }

        /// <summary>
        /// Gets or Sets OutputType
        /// </summary>
        [DataMember(Name="outputType", EmitDefaultValue=false)]
        public OutputTypeEnum? OutputType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Expression" /> class.
        /// </summary>
        /// <param name="TableName">TableName.</param>
        /// <param name="Queries">Queries.</param>
        /// <param name="Desc">Desc.</param>
        /// <param name="DisplayText">DisplayText.</param>
        /// <param name="ServerText">ServerText.</param>
        /// <param name="QueryDescriptions">QueryDescriptions.</param>
        /// <param name="OutputType">OutputType.</param>
        /// <param name="StringSize">StringSize.</param>
        public Expression(string TableName = default(string), List<Query> Queries = default(List<Query>), string Desc = default(string), string DisplayText = default(string), string ServerText = default(string), List<string> QueryDescriptions = default(List<string>), OutputTypeEnum? OutputType = default(OutputTypeEnum?), int? StringSize = default(int?))
        {
            this.TableName = TableName;
            this.Queries = Queries;
            this.Desc = Desc;
            this.DisplayText = DisplayText;
            this.ServerText = ServerText;
            this.QueryDescriptions = QueryDescriptions;
            this.OutputType = OutputType;
            this.StringSize = StringSize;
        }
        
        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name="tableName", EmitDefaultValue=false)]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name="queries", EmitDefaultValue=false)]
        public List<Query> Queries { get; set; }

        /// <summary>
        /// Gets or Sets Desc
        /// </summary>
        [DataMember(Name="desc", EmitDefaultValue=false)]
        public string Desc { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=false)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets ServerText
        /// </summary>
        [DataMember(Name="serverText", EmitDefaultValue=false)]
        public string ServerText { get; set; }

        /// <summary>
        /// Gets or Sets QueryDescriptions
        /// </summary>
        [DataMember(Name="queryDescriptions", EmitDefaultValue=false)]
        public List<string> QueryDescriptions { get; set; }


        /// <summary>
        /// Gets or Sets StringSize
        /// </summary>
        [DataMember(Name="stringSize", EmitDefaultValue=false)]
        public int? StringSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Expression {\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  ServerText: ").Append(ServerText).Append("\n");
            sb.Append("  QueryDescriptions: ").Append(QueryDescriptions).Append("\n");
            sb.Append("  OutputType: ").Append(OutputType).Append("\n");
            sb.Append("  StringSize: ").Append(StringSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Expression);
        }

        /// <summary>
        /// Returns true if Expression instances are equal
        /// </summary>
        /// <param name="input">Instance of Expression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Expression input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && 
                (
                    this.Desc == input.Desc ||
                    (this.Desc != null &&
                    this.Desc.Equals(input.Desc))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.ServerText == input.ServerText ||
                    (this.ServerText != null &&
                    this.ServerText.Equals(input.ServerText))
                ) && 
                (
                    this.QueryDescriptions == input.QueryDescriptions ||
                    this.QueryDescriptions != null &&
                    this.QueryDescriptions.SequenceEqual(input.QueryDescriptions)
                ) && 
                (
                    this.OutputType == input.OutputType ||
                    (this.OutputType != null &&
                    this.OutputType.Equals(input.OutputType))
                ) && 
                (
                    this.StringSize == input.StringSize ||
                    (this.StringSize != null &&
                    this.StringSize.Equals(input.StringSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                if (this.Desc != null)
                    hashCode = hashCode * 59 + this.Desc.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.ServerText != null)
                    hashCode = hashCode * 59 + this.ServerText.GetHashCode();
                if (this.QueryDescriptions != null)
                    hashCode = hashCode * 59 + this.QueryDescriptions.GetHashCode();
                if (this.OutputType != null)
                    hashCode = hashCode * 59 + this.OutputType.GetHashCode();
                if (this.StringSize != null)
                    hashCode = hashCode * 59 + this.StringSize.GetHashCode();
                return hashCode;
            }
        }
    }

}

/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Details for a job to calculate check statistics for a list
    /// </summary>
    [DataContract]
    public partial class ListCheckJobDetail :  IEquatable<ListCheckJobDetail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListCheckJobDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListCheckJobDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListCheckJobDetail" /> class.
        /// </summary>
        /// <param name="ListCheck">If present, the end results of this job.</param>
        /// <param name="Id">The job&#39;s id (required).</param>
        /// <param name="IsComplete">Whether the job is complete or not (required).</param>
        /// <param name="QueuePosition">If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue.</param>
        /// <param name="Progress">If present, an estimate of how far through its processing this job is.</param>
        public ListCheckJobDetail(ListCheckDetail ListCheck = default(ListCheckDetail), int? Id = default(int?), bool? IsComplete = default(bool?), int? QueuePosition = default(int?), int? Progress = default(int?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ListCheckJobDetail and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "IsComplete" is required (not null)
            if (IsComplete == null)
            {
                throw new InvalidDataException("IsComplete is a required property for ListCheckJobDetail and cannot be null");
            }
            else
            {
                this.IsComplete = IsComplete;
            }
            this.ListCheck = ListCheck;
            this.QueuePosition = QueuePosition;
            this.Progress = Progress;
        }
        
        /// <summary>
        /// If present, the end results of this job
        /// </summary>
        /// <value>If present, the end results of this job</value>
        [DataMember(Name="listCheck", EmitDefaultValue=false)]
        public ListCheckDetail ListCheck { get; set; }

        /// <summary>
        /// The job&#39;s id
        /// </summary>
        /// <value>The job&#39;s id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Whether the job is complete or not
        /// </summary>
        /// <value>Whether the job is complete or not</value>
        [DataMember(Name="isComplete", EmitDefaultValue=false)]
        public bool? IsComplete { get; set; }

        /// <summary>
        /// If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue
        /// </summary>
        /// <value>If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue</value>
        [DataMember(Name="queuePosition", EmitDefaultValue=false)]
        public int? QueuePosition { get; set; }

        /// <summary>
        /// If present, an estimate of how far through its processing this job is
        /// </summary>
        /// <value>If present, an estimate of how far through its processing this job is</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public int? Progress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListCheckJobDetail {\n");
            sb.Append("  ListCheck: ").Append(ListCheck).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsComplete: ").Append(IsComplete).Append("\n");
            sb.Append("  QueuePosition: ").Append(QueuePosition).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListCheckJobDetail);
        }

        /// <summary>
        /// Returns true if ListCheckJobDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ListCheckJobDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListCheckJobDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListCheck == input.ListCheck ||
                    (this.ListCheck != null &&
                    this.ListCheck.Equals(input.ListCheck))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsComplete == input.IsComplete ||
                    (this.IsComplete != null &&
                    this.IsComplete.Equals(input.IsComplete))
                ) && 
                (
                    this.QueuePosition == input.QueuePosition ||
                    (this.QueuePosition != null &&
                    this.QueuePosition.Equals(input.QueuePosition))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ListCheck != null)
                    hashCode = hashCode * 59 + this.ListCheck.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsComplete != null)
                    hashCode = hashCode * 59 + this.IsComplete.GetHashCode();
                if (this.QueuePosition != null)
                    hashCode = hashCode * 59 + this.QueuePosition.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                return hashCode;
            }
        }
    }

}

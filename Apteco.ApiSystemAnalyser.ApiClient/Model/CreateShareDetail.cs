/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// The details required to create a new share
    /// </summary>
    [DataContract]
    public partial class CreateShareDetail :  IEquatable<CreateShareDetail>
    {
        /// <summary>
        /// The type of the shareable item (collection, list, etc.) being shared
        /// </summary>
        /// <value>The type of the shareable item (collection, list, etc.) being shared</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShareableTypeEnum
        {
            
            /// <summary>
            /// Enum Collection for value: Collection
            /// </summary>
            [EnumMember(Value = "Collection")]
            Collection = 1,
            
            /// <summary>
            /// Enum List for value: List
            /// </summary>
            [EnumMember(Value = "List")]
            List = 2
        }

        /// <summary>
        /// The type of the shareable item (collection, list, etc.) being shared
        /// </summary>
        /// <value>The type of the shareable item (collection, list, etc.) being shared</value>
        [DataMember(Name="shareableType", EmitDefaultValue=false)]
        public ShareableTypeEnum ShareableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShareDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateShareDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShareDetail" /> class.
        /// </summary>
        /// <param name="ShareableType">The type of the shareable item (collection, list, etc.) being shared (required).</param>
        /// <param name="ShareableId">The id of the shareable item being shared (required).</param>
        /// <param name="EmailAddressesToAdd">The list of email addresses to share this shareable item with (required).</param>
        /// <param name="NotifyAddedUsers">Whether to notify the users added in this share that the shareable item has now been shared with them (required).</param>
        /// <param name="AddedUserNotificationMessage">If added users are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message..</param>
        /// <param name="Notes">The notes associated with this share update.</param>
        /// <param name="ViewShareableUrl">A URL of a page to view the shareable item.  If specified this will be used in notification  messages to show added or removed users where to view the shareable item    If the URL is specified, it can use {shareableId} and {emailAddress} parameters    http://www.example.com/collections/{shareableId}?email&#x3D;{emailAddress}    If present, these parameters will be replaced with the id of the shareable item and the email address of the user being added/removed.</param>
        public CreateShareDetail(ShareableTypeEnum ShareableType = default(ShareableTypeEnum), int? ShareableId = default(int?), List<string> EmailAddressesToAdd = default(List<string>), bool? NotifyAddedUsers = default(bool?), string AddedUserNotificationMessage = default(string), string Notes = default(string), string ViewShareableUrl = default(string))
        {
            // to ensure "ShareableType" is required (not null)
            if (ShareableType == null)
            {
                throw new InvalidDataException("ShareableType is a required property for CreateShareDetail and cannot be null");
            }
            else
            {
                this.ShareableType = ShareableType;
            }
            // to ensure "ShareableId" is required (not null)
            if (ShareableId == null)
            {
                throw new InvalidDataException("ShareableId is a required property for CreateShareDetail and cannot be null");
            }
            else
            {
                this.ShareableId = ShareableId;
            }
            // to ensure "EmailAddressesToAdd" is required (not null)
            if (EmailAddressesToAdd == null)
            {
                throw new InvalidDataException("EmailAddressesToAdd is a required property for CreateShareDetail and cannot be null");
            }
            else
            {
                this.EmailAddressesToAdd = EmailAddressesToAdd;
            }
            // to ensure "NotifyAddedUsers" is required (not null)
            if (NotifyAddedUsers == null)
            {
                throw new InvalidDataException("NotifyAddedUsers is a required property for CreateShareDetail and cannot be null");
            }
            else
            {
                this.NotifyAddedUsers = NotifyAddedUsers;
            }
            this.AddedUserNotificationMessage = AddedUserNotificationMessage;
            this.Notes = Notes;
            this.ViewShareableUrl = ViewShareableUrl;
        }
        

        /// <summary>
        /// The id of the shareable item being shared
        /// </summary>
        /// <value>The id of the shareable item being shared</value>
        [DataMember(Name="shareableId", EmitDefaultValue=false)]
        public int? ShareableId { get; set; }

        /// <summary>
        /// The list of email addresses to share this shareable item with
        /// </summary>
        /// <value>The list of email addresses to share this shareable item with</value>
        [DataMember(Name="emailAddressesToAdd", EmitDefaultValue=false)]
        public List<string> EmailAddressesToAdd { get; set; }

        /// <summary>
        /// Whether to notify the users added in this share that the shareable item has now been shared with them
        /// </summary>
        /// <value>Whether to notify the users added in this share that the shareable item has now been shared with them</value>
        [DataMember(Name="notifyAddedUsers", EmitDefaultValue=false)]
        public bool? NotifyAddedUsers { get; set; }

        /// <summary>
        /// If added users are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.
        /// </summary>
        /// <value>If added users are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.</value>
        [DataMember(Name="addedUserNotificationMessage", EmitDefaultValue=false)]
        public string AddedUserNotificationMessage { get; set; }

        /// <summary>
        /// The notes associated with this share update
        /// </summary>
        /// <value>The notes associated with this share update</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// A URL of a page to view the shareable item.  If specified this will be used in notification  messages to show added or removed users where to view the shareable item    If the URL is specified, it can use {shareableId} and {emailAddress} parameters    http://www.example.com/collections/{shareableId}?email&#x3D;{emailAddress}    If present, these parameters will be replaced with the id of the shareable item and the email address of the user being added/removed
        /// </summary>
        /// <value>A URL of a page to view the shareable item.  If specified this will be used in notification  messages to show added or removed users where to view the shareable item    If the URL is specified, it can use {shareableId} and {emailAddress} parameters    http://www.example.com/collections/{shareableId}?email&#x3D;{emailAddress}    If present, these parameters will be replaced with the id of the shareable item and the email address of the user being added/removed</value>
        [DataMember(Name="viewShareableUrl", EmitDefaultValue=false)]
        public string ViewShareableUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateShareDetail {\n");
            sb.Append("  ShareableType: ").Append(ShareableType).Append("\n");
            sb.Append("  ShareableId: ").Append(ShareableId).Append("\n");
            sb.Append("  EmailAddressesToAdd: ").Append(EmailAddressesToAdd).Append("\n");
            sb.Append("  NotifyAddedUsers: ").Append(NotifyAddedUsers).Append("\n");
            sb.Append("  AddedUserNotificationMessage: ").Append(AddedUserNotificationMessage).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ViewShareableUrl: ").Append(ViewShareableUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShareDetail);
        }

        /// <summary>
        /// Returns true if CreateShareDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShareDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShareDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShareableType == input.ShareableType ||
                    (this.ShareableType != null &&
                    this.ShareableType.Equals(input.ShareableType))
                ) && 
                (
                    this.ShareableId == input.ShareableId ||
                    (this.ShareableId != null &&
                    this.ShareableId.Equals(input.ShareableId))
                ) && 
                (
                    this.EmailAddressesToAdd == input.EmailAddressesToAdd ||
                    this.EmailAddressesToAdd != null &&
                    this.EmailAddressesToAdd.SequenceEqual(input.EmailAddressesToAdd)
                ) && 
                (
                    this.NotifyAddedUsers == input.NotifyAddedUsers ||
                    (this.NotifyAddedUsers != null &&
                    this.NotifyAddedUsers.Equals(input.NotifyAddedUsers))
                ) && 
                (
                    this.AddedUserNotificationMessage == input.AddedUserNotificationMessage ||
                    (this.AddedUserNotificationMessage != null &&
                    this.AddedUserNotificationMessage.Equals(input.AddedUserNotificationMessage))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.ViewShareableUrl == input.ViewShareableUrl ||
                    (this.ViewShareableUrl != null &&
                    this.ViewShareableUrl.Equals(input.ViewShareableUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShareableType != null)
                    hashCode = hashCode * 59 + this.ShareableType.GetHashCode();
                if (this.ShareableId != null)
                    hashCode = hashCode * 59 + this.ShareableId.GetHashCode();
                if (this.EmailAddressesToAdd != null)
                    hashCode = hashCode * 59 + this.EmailAddressesToAdd.GetHashCode();
                if (this.NotifyAddedUsers != null)
                    hashCode = hashCode * 59 + this.NotifyAddedUsers.GetHashCode();
                if (this.AddedUserNotificationMessage != null)
                    hashCode = hashCode * 59 + this.AddedUserNotificationMessage.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.ViewShareableUrl != null)
                    hashCode = hashCode * 59 + this.ViewShareableUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}

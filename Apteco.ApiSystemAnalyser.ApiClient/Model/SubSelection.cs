/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// SubSelection
    /// </summary>
    [DataContract]
    public partial class SubSelection :  IEquatable<SubSelection>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubSelection" /> class.
        /// </summary>
        /// <param name="ByReference">ByReference.</param>
        /// <param name="Path">Path.</param>
        /// <param name="Selection">Selection.</param>
        public SubSelection(bool? ByReference = default(bool?), string Path = default(string), Selection Selection = default(Selection))
        {
            this.ByReference = ByReference;
            this.Path = Path;
            this.Selection = Selection;
        }
        
        /// <summary>
        /// Gets or Sets ByReference
        /// </summary>
        [DataMember(Name="byReference", EmitDefaultValue=false)]
        public bool? ByReference { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Selection
        /// </summary>
        [DataMember(Name="selection", EmitDefaultValue=false)]
        public Selection Selection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubSelection {\n");
            sb.Append("  ByReference: ").Append(ByReference).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Selection: ").Append(Selection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubSelection);
        }

        /// <summary>
        /// Returns true if SubSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of SubSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ByReference == input.ByReference ||
                    (this.ByReference != null &&
                    this.ByReference.Equals(input.ByReference))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Selection == input.Selection ||
                    (this.Selection != null &&
                    this.Selection.Equals(input.Selection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ByReference != null)
                    hashCode = hashCode * 59 + this.ByReference.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Selection != null)
                    hashCode = hashCode * 59 + this.Selection.GetHashCode();
                return hashCode;
            }
        }
    }

}

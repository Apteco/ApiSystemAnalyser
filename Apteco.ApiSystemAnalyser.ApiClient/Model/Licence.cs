/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// The licence details for the user
    /// </summary>
    [DataContract]
    public partial class Licence :  IEquatable<Licence>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Licence" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Licence() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Licence" /> class.
        /// </summary>
        /// <param name="ListSelection">Whether this user is allowed to access \&quot;List Selection\&quot; functionality (required).</param>
        /// <param name="ListPreview">Whether this user is allowed to access \&quot;List Preview\&quot; functionality (required).</param>
        /// <param name="Export">Whether this user is allowed to access \&quot;Export\&quot; functionality (required).</param>
        /// <param name="AdvancedQuery">Whether this user is allowed to access \&quot;Advanced Query\&quot; functionality (required).</param>
        /// <param name="Cube">Whether this user is allowed to access \&quot;Cube\&quot; functionality (required).</param>
        /// <param name="Profile">Whether this user is allowed to access \&quot;Profile\&quot; functionality. (required).</param>
        public Licence(bool? ListSelection = default(bool?), bool? ListPreview = default(bool?), bool? Export = default(bool?), bool? AdvancedQuery = default(bool?), bool? Cube = default(bool?), bool? Profile = default(bool?))
        {
            // to ensure "ListSelection" is required (not null)
            if (ListSelection == null)
            {
                throw new InvalidDataException("ListSelection is a required property for Licence and cannot be null");
            }
            else
            {
                this.ListSelection = ListSelection;
            }
            // to ensure "ListPreview" is required (not null)
            if (ListPreview == null)
            {
                throw new InvalidDataException("ListPreview is a required property for Licence and cannot be null");
            }
            else
            {
                this.ListPreview = ListPreview;
            }
            // to ensure "Export" is required (not null)
            if (Export == null)
            {
                throw new InvalidDataException("Export is a required property for Licence and cannot be null");
            }
            else
            {
                this.Export = Export;
            }
            // to ensure "AdvancedQuery" is required (not null)
            if (AdvancedQuery == null)
            {
                throw new InvalidDataException("AdvancedQuery is a required property for Licence and cannot be null");
            }
            else
            {
                this.AdvancedQuery = AdvancedQuery;
            }
            // to ensure "Cube" is required (not null)
            if (Cube == null)
            {
                throw new InvalidDataException("Cube is a required property for Licence and cannot be null");
            }
            else
            {
                this.Cube = Cube;
            }
            // to ensure "Profile" is required (not null)
            if (Profile == null)
            {
                throw new InvalidDataException("Profile is a required property for Licence and cannot be null");
            }
            else
            {
                this.Profile = Profile;
            }
        }
        
        /// <summary>
        /// Whether this user is allowed to access \&quot;List Selection\&quot; functionality
        /// </summary>
        /// <value>Whether this user is allowed to access \&quot;List Selection\&quot; functionality</value>
        [DataMember(Name="listSelection", EmitDefaultValue=false)]
        public bool? ListSelection { get; set; }

        /// <summary>
        /// Whether this user is allowed to access \&quot;List Preview\&quot; functionality
        /// </summary>
        /// <value>Whether this user is allowed to access \&quot;List Preview\&quot; functionality</value>
        [DataMember(Name="listPreview", EmitDefaultValue=false)]
        public bool? ListPreview { get; set; }

        /// <summary>
        /// Whether this user is allowed to access \&quot;Export\&quot; functionality
        /// </summary>
        /// <value>Whether this user is allowed to access \&quot;Export\&quot; functionality</value>
        [DataMember(Name="export", EmitDefaultValue=false)]
        public bool? Export { get; set; }

        /// <summary>
        /// Whether this user is allowed to access \&quot;Advanced Query\&quot; functionality
        /// </summary>
        /// <value>Whether this user is allowed to access \&quot;Advanced Query\&quot; functionality</value>
        [DataMember(Name="advancedQuery", EmitDefaultValue=false)]
        public bool? AdvancedQuery { get; set; }

        /// <summary>
        /// Whether this user is allowed to access \&quot;Cube\&quot; functionality
        /// </summary>
        /// <value>Whether this user is allowed to access \&quot;Cube\&quot; functionality</value>
        [DataMember(Name="cube", EmitDefaultValue=false)]
        public bool? Cube { get; set; }

        /// <summary>
        /// Whether this user is allowed to access \&quot;Profile\&quot; functionality.
        /// </summary>
        /// <value>Whether this user is allowed to access \&quot;Profile\&quot; functionality.</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public bool? Profile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Licence {\n");
            sb.Append("  ListSelection: ").Append(ListSelection).Append("\n");
            sb.Append("  ListPreview: ").Append(ListPreview).Append("\n");
            sb.Append("  Export: ").Append(Export).Append("\n");
            sb.Append("  AdvancedQuery: ").Append(AdvancedQuery).Append("\n");
            sb.Append("  Cube: ").Append(Cube).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Licence);
        }

        /// <summary>
        /// Returns true if Licence instances are equal
        /// </summary>
        /// <param name="input">Instance of Licence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Licence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListSelection == input.ListSelection ||
                    (this.ListSelection != null &&
                    this.ListSelection.Equals(input.ListSelection))
                ) && 
                (
                    this.ListPreview == input.ListPreview ||
                    (this.ListPreview != null &&
                    this.ListPreview.Equals(input.ListPreview))
                ) && 
                (
                    this.Export == input.Export ||
                    (this.Export != null &&
                    this.Export.Equals(input.Export))
                ) && 
                (
                    this.AdvancedQuery == input.AdvancedQuery ||
                    (this.AdvancedQuery != null &&
                    this.AdvancedQuery.Equals(input.AdvancedQuery))
                ) && 
                (
                    this.Cube == input.Cube ||
                    (this.Cube != null &&
                    this.Cube.Equals(input.Cube))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ListSelection != null)
                    hashCode = hashCode * 59 + this.ListSelection.GetHashCode();
                if (this.ListPreview != null)
                    hashCode = hashCode * 59 + this.ListPreview.GetHashCode();
                if (this.Export != null)
                    hashCode = hashCode * 59 + this.Export.GetHashCode();
                if (this.AdvancedQuery != null)
                    hashCode = hashCode * 59 + this.AdvancedQuery.GetHashCode();
                if (this.Cube != null)
                    hashCode = hashCode * 59 + this.Cube.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                return hashCode;
            }
        }
    }

}

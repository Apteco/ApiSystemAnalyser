/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Apteco.ApiSystemAnalyser.ApiClient.Client.SwaggerDateConverter;

namespace Apteco.ApiSystemAnalyser.ApiClient.Model
{
    /// <summary>
    /// Details for the definition of a composition for the list export screen
    /// </summary>
    [DataContract]
    public partial class ExportCompositionDefinition :  IEquatable<ExportCompositionDefinition>
    {
        /// <summary>
        /// The format of the export file to produce
        /// </summary>
        /// <value>The format of the export file to produce</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputFormatEnum
        {
            
            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 1,
            
            /// <summary>
            /// Enum SDF for value: SDF
            /// </summary>
            [EnumMember(Value = "SDF")]
            SDF = 2,
            
            /// <summary>
            /// Enum XLSX for value: XLSX
            /// </summary>
            [EnumMember(Value = "XLSX")]
            XLSX = 3,
            
            /// <summary>
            /// Enum MDB for value: MDB
            /// </summary>
            [EnumMember(Value = "MDB")]
            MDB = 4,
            
            /// <summary>
            /// Enum DBF for value: DBF
            /// </summary>
            [EnumMember(Value = "DBF")]
            DBF = 5,
            
            /// <summary>
            /// Enum URN for value: URN
            /// </summary>
            [EnumMember(Value = "URN")]
            URN = 6
        }

        /// <summary>
        /// The format of the export file to produce
        /// </summary>
        /// <value>The format of the export file to produce</value>
        [DataMember(Name="outputFormat", EmitDefaultValue=false)]
        public OutputFormatEnum OutputFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportCompositionDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportCompositionDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportCompositionDefinition" /> class.
        /// </summary>
        /// <param name="OutputFormat">The format of the export file to produce (required).</param>
        /// <param name="GridItems">The set of grid items to show in this composition (required).</param>
        public ExportCompositionDefinition(OutputFormatEnum OutputFormat = default(OutputFormatEnum), List<GridItem> GridItems = default(List<GridItem>))
        {
            // to ensure "OutputFormat" is required (not null)
            if (OutputFormat == null)
            {
                throw new InvalidDataException("OutputFormat is a required property for ExportCompositionDefinition and cannot be null");
            }
            else
            {
                this.OutputFormat = OutputFormat;
            }
            // to ensure "GridItems" is required (not null)
            if (GridItems == null)
            {
                throw new InvalidDataException("GridItems is a required property for ExportCompositionDefinition and cannot be null");
            }
            else
            {
                this.GridItems = GridItems;
            }
        }
        

        /// <summary>
        /// The set of grid items to show in this composition
        /// </summary>
        /// <value>The set of grid items to show in this composition</value>
        [DataMember(Name="gridItems", EmitDefaultValue=false)]
        public List<GridItem> GridItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportCompositionDefinition {\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  GridItems: ").Append(GridItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportCompositionDefinition);
        }

        /// <summary>
        /// Returns true if ExportCompositionDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportCompositionDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportCompositionDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutputFormat == input.OutputFormat ||
                    (this.OutputFormat != null &&
                    this.OutputFormat.Equals(input.OutputFormat))
                ) && 
                (
                    this.GridItems == input.GridItems ||
                    this.GridItems != null &&
                    this.GridItems.SequenceEqual(input.GridItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutputFormat != null)
                    hashCode = hashCode * 59 + this.OutputFormat.GetHashCode();
                if (this.GridItems != null)
                    hashCode = hashCode * 59 + this.GridItems.GetHashCode();
                return hashCode;
            }
        }
    }

}

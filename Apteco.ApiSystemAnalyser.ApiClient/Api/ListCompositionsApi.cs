/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiSystemAnalyser.ApiClient.Client;
using Apteco.ApiSystemAnalyser.ApiClient.Model;

namespace Apteco.ApiSystemAnalyser.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListCompositionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to create the composition for</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns></returns>
        void ListCompositionsCreateListComposition (string dataViewName, string systemName, CreateListCompositionDetail createListCompositionDetail = null);

        /// <summary>
        /// Create a list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to create the composition for</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListCompositionsCreateListCompositionWithHttpInfo (string dataViewName, string systemName, CreateListCompositionDetail createListCompositionDetail = null);
        /// <summary>
        /// Deletes a given list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to delete the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns></returns>
        void ListCompositionsDeleteListComposition (string dataViewName, string systemName, int? listCompositionId);

        /// <summary>
        /// Deletes a given list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to delete the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListCompositionsDeleteListCompositionWithHttpInfo (string dataViewName, string systemName, int? listCompositionId);
        /// <summary>
        /// Returns details for a given list composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>CompositionDetail</returns>
        CompositionDetail ListCompositionsGetListComposition (string dataViewName, string systemName, int? listCompositionId);

        /// <summary>
        /// Returns details for a given list composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>ApiResponse of CompositionDetail</returns>
        ApiResponse<CompositionDetail> ListCompositionsGetListCompositionWithHttpInfo (string dataViewName, string systemName, int? listCompositionId);
        /// <summary>
        /// Returns all the avaiable list compositions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCompositionSummary</returns>
        PagedResultsCompositionSummary ListCompositionsGetListCompositions (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the avaiable list compositions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCompositionSummary</returns>
        ApiResponse<PagedResultsCompositionSummary> ListCompositionsGetListCompositionsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all the avaiable list compositions for the given FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCompositionSummary</returns>
        PagedResultsCompositionSummary ListCompositionsGetListCompositionsForSystem (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the avaiable list compositions for the given FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCompositionSummary</returns>
        ApiResponse<PagedResultsCompositionSummary> ListCompositionsGetListCompositionsForSystemWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Update a given list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to update the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns></returns>
        void ListCompositionsUpdateListComposition (string dataViewName, string systemName, int? listCompositionId, CreateListCompositionDetail createListCompositionDetail = null);

        /// <summary>
        /// Update a given list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to update the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListCompositionsUpdateListCompositionWithHttpInfo (string dataViewName, string systemName, int? listCompositionId, CreateListCompositionDetail createListCompositionDetail = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to create the composition for</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListCompositionsCreateListCompositionAsync (string dataViewName, string systemName, CreateListCompositionDetail createListCompositionDetail = null);

        /// <summary>
        /// Create a list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to create the composition for</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListCompositionsCreateListCompositionAsyncWithHttpInfo (string dataViewName, string systemName, CreateListCompositionDetail createListCompositionDetail = null);
        /// <summary>
        /// Deletes a given list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to delete the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListCompositionsDeleteListCompositionAsync (string dataViewName, string systemName, int? listCompositionId);

        /// <summary>
        /// Deletes a given list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to delete the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListCompositionsDeleteListCompositionAsyncWithHttpInfo (string dataViewName, string systemName, int? listCompositionId);
        /// <summary>
        /// Returns details for a given list composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>Task of CompositionDetail</returns>
        System.Threading.Tasks.Task<CompositionDetail> ListCompositionsGetListCompositionAsync (string dataViewName, string systemName, int? listCompositionId);

        /// <summary>
        /// Returns details for a given list composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>Task of ApiResponse (CompositionDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompositionDetail>> ListCompositionsGetListCompositionAsyncWithHttpInfo (string dataViewName, string systemName, int? listCompositionId);
        /// <summary>
        /// Returns all the avaiable list compositions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCompositionSummary</returns>
        System.Threading.Tasks.Task<PagedResultsCompositionSummary> ListCompositionsGetListCompositionsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the avaiable list compositions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCompositionSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCompositionSummary>> ListCompositionsGetListCompositionsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns all the avaiable list compositions for the given FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCompositionSummary</returns>
        System.Threading.Tasks.Task<PagedResultsCompositionSummary> ListCompositionsGetListCompositionsForSystemAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns all the avaiable list compositions for the given FastStats system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCompositionSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsCompositionSummary>> ListCompositionsGetListCompositionsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Update a given list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to update the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListCompositionsUpdateListCompositionAsync (string dataViewName, string systemName, int? listCompositionId, CreateListCompositionDetail createListCompositionDetail = null);

        /// <summary>
        /// Update a given list composition for the given FastStats system.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListPreview]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to update the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListCompositionsUpdateListCompositionAsyncWithHttpInfo (string dataViewName, string systemName, int? listCompositionId, CreateListCompositionDetail createListCompositionDetail = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListCompositionsApi : IListCompositionsApi
    {
        private Apteco.ApiSystemAnalyser.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListCompositionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListCompositionsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiSystemAnalyser.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListCompositionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListCompositionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiSystemAnalyser.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiSystemAnalyser.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to create the composition for</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns></returns>
        public void ListCompositionsCreateListComposition (string dataViewName, string systemName, CreateListCompositionDetail createListCompositionDetail = null)
        {
             ListCompositionsCreateListCompositionWithHttpInfo(dataViewName, systemName, createListCompositionDetail);
        }

        /// <summary>
        /// Create a list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to create the composition for</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListCompositionsCreateListCompositionWithHttpInfo (string dataViewName, string systemName, CreateListCompositionDetail createListCompositionDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsCreateListComposition");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsCreateListComposition");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (createListCompositionDetail != null && createListCompositionDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createListCompositionDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListCompositionDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsCreateListComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to create the composition for</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListCompositionsCreateListCompositionAsync (string dataViewName, string systemName, CreateListCompositionDetail createListCompositionDetail = null)
        {
             await ListCompositionsCreateListCompositionAsyncWithHttpInfo(dataViewName, systemName, createListCompositionDetail);

        }

        /// <summary>
        /// Create a list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to create the composition for</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListCompositionsCreateListCompositionAsyncWithHttpInfo (string dataViewName, string systemName, CreateListCompositionDetail createListCompositionDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsCreateListComposition");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsCreateListComposition");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (createListCompositionDetail != null && createListCompositionDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createListCompositionDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListCompositionDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsCreateListComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a given list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to delete the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns></returns>
        public void ListCompositionsDeleteListComposition (string dataViewName, string systemName, int? listCompositionId)
        {
             ListCompositionsDeleteListCompositionWithHttpInfo(dataViewName, systemName, listCompositionId);
        }

        /// <summary>
        /// Deletes a given list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to delete the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListCompositionsDeleteListCompositionWithHttpInfo (string dataViewName, string systemName, int? listCompositionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsDeleteListComposition");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsDeleteListComposition");
            // verify the required parameter 'listCompositionId' is set
            if (listCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'listCompositionId' when calling ListCompositionsApi->ListCompositionsDeleteListComposition");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}/{listCompositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (listCompositionId != null) localVarPathParams.Add("listCompositionId", Configuration.ApiClient.ParameterToString(listCompositionId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsDeleteListComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a given list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to delete the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListCompositionsDeleteListCompositionAsync (string dataViewName, string systemName, int? listCompositionId)
        {
             await ListCompositionsDeleteListCompositionAsyncWithHttpInfo(dataViewName, systemName, listCompositionId);

        }

        /// <summary>
        /// Deletes a given list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to delete the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListCompositionsDeleteListCompositionAsyncWithHttpInfo (string dataViewName, string systemName, int? listCompositionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsDeleteListComposition");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsDeleteListComposition");
            // verify the required parameter 'listCompositionId' is set
            if (listCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'listCompositionId' when calling ListCompositionsApi->ListCompositionsDeleteListComposition");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}/{listCompositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (listCompositionId != null) localVarPathParams.Add("listCompositionId", Configuration.ApiClient.ParameterToString(listCompositionId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsDeleteListComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns details for a given list composition 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>CompositionDetail</returns>
        public CompositionDetail ListCompositionsGetListComposition (string dataViewName, string systemName, int? listCompositionId)
        {
             ApiResponse<CompositionDetail> localVarResponse = ListCompositionsGetListCompositionWithHttpInfo(dataViewName, systemName, listCompositionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for a given list composition 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>ApiResponse of CompositionDetail</returns>
        public ApiResponse< CompositionDetail > ListCompositionsGetListCompositionWithHttpInfo (string dataViewName, string systemName, int? listCompositionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsGetListComposition");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsGetListComposition");
            // verify the required parameter 'listCompositionId' is set
            if (listCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'listCompositionId' when calling ListCompositionsApi->ListCompositionsGetListComposition");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}/{listCompositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (listCompositionId != null) localVarPathParams.Add("listCompositionId", Configuration.ApiClient.ParameterToString(listCompositionId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsGetListComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompositionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CompositionDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompositionDetail)));
        }

        /// <summary>
        /// Returns details for a given list composition 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>Task of CompositionDetail</returns>
        public async System.Threading.Tasks.Task<CompositionDetail> ListCompositionsGetListCompositionAsync (string dataViewName, string systemName, int? listCompositionId)
        {
             ApiResponse<CompositionDetail> localVarResponse = await ListCompositionsGetListCompositionAsyncWithHttpInfo(dataViewName, systemName, listCompositionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for a given list composition 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <returns>Task of ApiResponse (CompositionDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompositionDetail>> ListCompositionsGetListCompositionAsyncWithHttpInfo (string dataViewName, string systemName, int? listCompositionId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsGetListComposition");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsGetListComposition");
            // verify the required parameter 'listCompositionId' is set
            if (listCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'listCompositionId' when calling ListCompositionsApi->ListCompositionsGetListComposition");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}/{listCompositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (listCompositionId != null) localVarPathParams.Add("listCompositionId", Configuration.ApiClient.ParameterToString(listCompositionId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsGetListComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompositionDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CompositionDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompositionDetail)));
        }

        /// <summary>
        /// Returns all the avaiable list compositions. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCompositionSummary</returns>
        public PagedResultsCompositionSummary ListCompositionsGetListCompositions (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCompositionSummary> localVarResponse = ListCompositionsGetListCompositionsWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the avaiable list compositions. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCompositionSummary</returns>
        public ApiResponse< PagedResultsCompositionSummary > ListCompositionsGetListCompositionsWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsGetListCompositions");

            var localVarPath = "./{dataViewName}/ListCompositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsGetListCompositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCompositionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsCompositionSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCompositionSummary)));
        }

        /// <summary>
        /// Returns all the avaiable list compositions. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCompositionSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsCompositionSummary> ListCompositionsGetListCompositionsAsync (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCompositionSummary> localVarResponse = await ListCompositionsGetListCompositionsAsyncWithHttpInfo(dataViewName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all the avaiable list compositions. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCompositionSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCompositionSummary>> ListCompositionsGetListCompositionsAsyncWithHttpInfo (string dataViewName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsGetListCompositions");

            var localVarPath = "./{dataViewName}/ListCompositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsGetListCompositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCompositionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsCompositionSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCompositionSummary)));
        }

        /// <summary>
        /// Returns all the avaiable list compositions for the given FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsCompositionSummary</returns>
        public PagedResultsCompositionSummary ListCompositionsGetListCompositionsForSystem (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCompositionSummary> localVarResponse = ListCompositionsGetListCompositionsForSystemWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all the avaiable list compositions for the given FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsCompositionSummary</returns>
        public ApiResponse< PagedResultsCompositionSummary > ListCompositionsGetListCompositionsForSystemWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsGetListCompositionsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsGetListCompositionsForSystem");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsGetListCompositionsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCompositionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsCompositionSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCompositionSummary)));
        }

        /// <summary>
        /// Returns all the avaiable list compositions for the given FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsCompositionSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsCompositionSummary> ListCompositionsGetListCompositionsForSystemAsync (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsCompositionSummary> localVarResponse = await ListCompositionsGetListCompositionsForSystemAsyncWithHttpInfo(dataViewName, systemName, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all the avaiable list compositions for the given FastStats system 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to get compositions for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Description, Type, SystemName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsCompositionSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsCompositionSummary>> ListCompositionsGetListCompositionsForSystemAsyncWithHttpInfo (string dataViewName, string systemName, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsGetListCompositionsForSystem");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsGetListCompositionsForSystem");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsGetListCompositionsForSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsCompositionSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsCompositionSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsCompositionSummary)));
        }

        /// <summary>
        /// Update a given list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to update the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns></returns>
        public void ListCompositionsUpdateListComposition (string dataViewName, string systemName, int? listCompositionId, CreateListCompositionDetail createListCompositionDetail = null)
        {
             ListCompositionsUpdateListCompositionWithHttpInfo(dataViewName, systemName, listCompositionId, createListCompositionDetail);
        }

        /// <summary>
        /// Update a given list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to update the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListCompositionsUpdateListCompositionWithHttpInfo (string dataViewName, string systemName, int? listCompositionId, CreateListCompositionDetail createListCompositionDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsUpdateListComposition");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsUpdateListComposition");
            // verify the required parameter 'listCompositionId' is set
            if (listCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'listCompositionId' when calling ListCompositionsApi->ListCompositionsUpdateListComposition");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}/{listCompositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (listCompositionId != null) localVarPathParams.Add("listCompositionId", Configuration.ApiClient.ParameterToString(listCompositionId)); // path parameter
            if (createListCompositionDetail != null && createListCompositionDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createListCompositionDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListCompositionDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsUpdateListComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a given list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to update the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListCompositionsUpdateListCompositionAsync (string dataViewName, string systemName, int? listCompositionId, CreateListCompositionDetail createListCompositionDetail = null)
        {
             await ListCompositionsUpdateListCompositionAsyncWithHttpInfo(dataViewName, systemName, listCompositionId, createListCompositionDetail);

        }

        /// <summary>
        /// Update a given list composition for the given FastStats system.  This endpoint is only available for admin users. Requires licence flags [ListPreview]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="systemName">The name of the FastStats system to update the composition for</param>
        /// <param name="listCompositionId">The id of the list composition</param>
        /// <param name="createListCompositionDetail">Details to create the list composition with (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListCompositionsUpdateListCompositionAsyncWithHttpInfo (string dataViewName, string systemName, int? listCompositionId, CreateListCompositionDetail createListCompositionDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListCompositionsApi->ListCompositionsUpdateListComposition");
            // verify the required parameter 'systemName' is set
            if (systemName == null)
                throw new ApiException(400, "Missing required parameter 'systemName' when calling ListCompositionsApi->ListCompositionsUpdateListComposition");
            // verify the required parameter 'listCompositionId' is set
            if (listCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'listCompositionId' when calling ListCompositionsApi->ListCompositionsUpdateListComposition");

            var localVarPath = "./{dataViewName}/ListCompositions/{systemName}/{listCompositionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (systemName != null) localVarPathParams.Add("systemName", Configuration.ApiClient.ParameterToString(systemName)); // path parameter
            if (listCompositionId != null) localVarPathParams.Add("listCompositionId", Configuration.ApiClient.ParameterToString(listCompositionId)); // path parameter
            if (createListCompositionDetail != null && createListCompositionDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createListCompositionDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListCompositionDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCompositionsUpdateListComposition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}

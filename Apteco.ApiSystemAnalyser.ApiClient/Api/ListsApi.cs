/* 
 * Apteco API
 *
 * An API to allow access to Apteco Marketing Suite resources
 *
 * OpenAPI spec version: v2
 * Contact: support@apteco.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Apteco.ApiSystemAnalyser.ApiClient.Client;
using Apteco.ApiSystemAnalyser.ApiClient.Model;

namespace Apteco.ApiSystemAnalyser.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ListResultDetail</returns>
        ListResultDetail ListsCalculateListLatestUpdateSync (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of ListResultDetail</returns>
        ApiResponse<ListResultDetail> ListsCalculateListLatestUpdateSyncWithHttpInfo (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Cancel a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void ListsCancelCalculateListJob (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Cancel a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListsCancelCalculateListJobWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Cancel a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void ListsCancelCheckListJob (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Cancel a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListsCancelCheckListJobWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Cancel a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        void ListsCancelExportListJob (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Cancel a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListsCancelExportListJobWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ListCheckDetail</returns>
        ListCheckDetail ListsCheckListLatestUpdateSync (string dataViewName, int? listId, CheckListDetails checkListDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of ListCheckDetail</returns>
        ApiResponse<ListCheckDetail> ListsCheckListLatestUpdateSyncWithHttpInfo (string dataViewName, int? listId, CheckListDetails checkListDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <returns>ListCalculateJobDetail</returns>
        ListCalculateJobDetail ListsCreateCalculateListJobForLatestUpdate (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null);

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <returns>ApiResponse of ListCalculateJobDetail</returns>
        ApiResponse<ListCalculateJobDetail> ListsCreateCalculateListJobForLatestUpdateWithHttpInfo (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null);
        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <returns>ListCheckJobDetail</returns>
        ListCheckJobDetail ListsCreateCheckListJobForLatestUpdate (string dataViewName, int? listId, CheckListDetails checkListDetails = null);

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <returns>ApiResponse of ListCheckJobDetail</returns>
        ApiResponse<ListCheckJobDetail> ListsCreateCheckListJobForLatestUpdateWithHttpInfo (string dataViewName, int? listId, CheckListDetails checkListDetails = null);
        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for exporting this list. (optional)</param>
        /// <returns>ListExportJobDetail</returns>
        ListExportJobDetail ListsCreateExportListJobForLatestUpdate (string dataViewName, int? listId, ExportListDetails exportListDetails = null);

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for exporting this list. (optional)</param>
        /// <returns>ApiResponse of ListExportJobDetail</returns>
        ApiResponse<ListExportJobDetail> ListsCreateExportListJobForLatestUpdateWithHttpInfo (string dataViewName, int? listId, ExportListDetails exportListDetails = null);
        /// <summary>
        /// Creates a new list from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listDetail">The details for the list to create.  If you want              to update a specific list then PUT to the /Lists/{listId} URL (optional)</param>
        /// <returns>ListDetail</returns>
        ListDetail ListsCreateList (string dataViewName, CreateListDetail listDetail = null);

        /// <summary>
        /// Creates a new list from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listDetail">The details for the list to create.  If you want              to update a specific list then PUT to the /Lists/{listId} URL (optional)</param>
        /// <returns>ApiResponse of ListDetail</returns>
        ApiResponse<ListDetail> ListsCreateListWithHttpInfo (string dataViewName, CreateListDetail listDetail = null);
        /// <summary>
        /// Register a hit (view) for the given list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to register the hit for</param>
        /// <param name="createListHitDetails">Details to register the hit with (optional)</param>
        /// <returns>CollectionHitDetail</returns>
        CollectionHitDetail ListsCreateListHitForList (string dataViewName, int? listId, CreateListHitDetails createListHitDetails = null);

        /// <summary>
        /// Register a hit (view) for the given list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to register the hit for</param>
        /// <param name="createListHitDetails">Details to register the hit with (optional)</param>
        /// <returns>ApiResponse of CollectionHitDetail</returns>
        ApiResponse<CollectionHitDetail> ListsCreateListHitForListWithHttpInfo (string dataViewName, int? listId, CreateListHitDetails createListHitDetails = null);
        /// <summary>
        /// Updates the details of a particular list.  If you don&#39;t have an id for the  list then POST to the /Lists URL to create a new list.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to add/update</param>
        /// <param name="createListUpdate">The details for the list to add/update (optional)</param>
        /// <returns>ListUpdateDetail</returns>
        ListUpdateDetail ListsCreateListUpdate (string dataViewName, int? listId, CreateListUpdate createListUpdate = null);

        /// <summary>
        /// Updates the details of a particular list.  If you don&#39;t have an id for the  list then POST to the /Lists URL to create a new list.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to add/update</param>
        /// <param name="createListUpdate">The details for the list to add/update (optional)</param>
        /// <returns>ApiResponse of ListUpdateDetail</returns>
        ApiResponse<ListUpdateDetail> ListsCreateListUpdateWithHttpInfo (string dataViewName, int? listId, CreateListUpdate createListUpdate = null);
        /// <summary>
        /// Deletes the specified list
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to delete</param>
        /// <returns></returns>
        void ListsDeleteList (string dataViewName, int? listId);

        /// <summary>
        /// Deletes the specified list
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ListsDeleteListWithHttpInfo (string dataViewName, int? listId);
        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ListExportDetail</returns>
        ListExportDetail ListsExportListLatestUpdateSync (string dataViewName, int? listId, ExportListDetails exportListDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of ListExportDetail</returns>
        ApiResponse<ListExportDetail> ListsExportListLatestUpdateSyncWithHttpInfo (string dataViewName, int? listId, ExportListDetails exportListDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ListCalculateJobDetail</returns>
        ListCalculateJobDetail ListsGetCalculateListJob (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ListCalculateJobDetail</returns>
        ApiResponse<ListCalculateJobDetail> ListsGetCalculateListJobWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Get the status of a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ListCheckJobDetail</returns>
        ListCheckJobDetail ListsGetCheckListJob (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Get the status of a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ListCheckJobDetail</returns>
        ApiResponse<ListCheckJobDetail> ListsGetCheckListJobWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Get the status of a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ListExportJobDetail</returns>
        ListExportJobDetail ListsGetExportListJob (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Get the status of a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ListExportJobDetail</returns>
        ApiResponse<ListExportJobDetail> ListsGetExportListJobWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Returns the details of a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ListDetail</returns>
        ListDetail ListsGetList (string dataViewName, int? listId, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Returns the details of a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of ListDetail</returns>
        ApiResponse<ListDetail> ListsGetListWithHttpInfo (string dataViewName, int? listId, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Returns details for a given list hit for this list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="listHitId">The id of the hit</param>
        /// <returns>CollectionHitDetail</returns>
        CollectionHitDetail ListsGetListHitForList (string dataViewName, int? listId, int? listHitId);

        /// <summary>
        /// Returns details for a given list hit for this list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="listHitId">The id of the hit</param>
        /// <returns>ApiResponse of CollectionHitDetail</returns>
        ApiResponse<CollectionHitDetail> ListsGetListHitForListWithHttpInfo (string dataViewName, int? listId, int? listHitId);
        /// <summary>
        /// Returns a summary of the hits for this list - i.e. information about when users have viewed the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsListHitSummary</returns>
        PagedResultsListHitSummary ListsGetListHitsForList (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the hits for this list - i.e. information about when users have viewed the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsListHitSummary</returns>
        ApiResponse<PagedResultsListHitSummary> ListsGetListHitsForListWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list</param>
        /// <returns>string</returns>
        string ListsGetListLatestNativeForNettQuery (string dataViewName, int? listId);

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ListsGetListLatestNativeForNettQueryWithHttpInfo (string dataViewName, int? listId);
        /// <summary>
        /// Returns details of a particular result for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the results for</param>
        /// <param name="listResultId">The id of the result for the list</param>
        /// <returns>ListResultDetail</returns>
        ListResultDetail ListsGetListResult (string dataViewName, int? listId, int? listResultId);

        /// <summary>
        /// Returns details of a particular result for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the results for</param>
        /// <param name="listResultId">The id of the result for the list</param>
        /// <returns>ApiResponse of ListResultDetail</returns>
        ApiResponse<ListResultDetail> ListsGetListResultWithHttpInfo (string dataViewName, int? listId, int? listResultId);
        /// <summary>
        /// Returns a summary of the results for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the list of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsListResultSummary</returns>
        PagedResultsListResultSummary ListsGetListResults (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the results for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the list of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsListResultSummary</returns>
        ApiResponse<PagedResultsListResultSummary> ListsGetListResultsWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of an update for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that contains the update</param>
        /// <param name="listUpdateId">The id of the update for the list</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ListUpdateDetail</returns>
        ListUpdateDetail ListsGetListUpdate (string dataViewName, int? listId, int? listUpdateId, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Returns details of an update for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that contains the update</param>
        /// <param name="listUpdateId">The id of the update for the list</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of ListUpdateDetail</returns>
        ApiResponse<ListUpdateDetail> ListsGetListUpdateWithHttpInfo (string dataViewName, int? listId, int? listUpdateId, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Returns a summary of the updates to a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsListUpdateSummary</returns>
        PagedResultsListUpdateSummary ListsGetListUpdates (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the updates to a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsListUpdateSummary</returns>
        ApiResponse<PagedResultsListUpdateSummary> ListsGetListUpdatesWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets summary information about each list in the DataView.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted lists, not deleted lists or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsListSummary</returns>
        PagedResultsListSummary ListsGetLists (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets summary information about each list in the DataView.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted lists, not deleted lists or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsListSummary</returns>
        ApiResponse<PagedResultsListSummary> ListsGetListsWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Transfer ownership of a list from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the list. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ListDetail</returns>
        ListDetail ListsTransferListOwnership (string dataViewName, int? listId, TransferListOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Transfer ownership of a list from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the list. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of ListDetail</returns>
        ApiResponse<ListDetail> ListsTransferListOwnershipWithHttpInfo (string dataViewName, int? listId, TransferListOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ListResultDetail</returns>
        System.Threading.Tasks.Task<ListResultDetail> ListsCalculateListLatestUpdateSyncAsync (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (ListResultDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListResultDetail>> ListsCalculateListLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Cancel a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListsCancelCalculateListJobAsync (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Cancel a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListsCancelCalculateListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Cancel a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListsCancelCheckListJobAsync (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Cancel a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListsCancelCheckListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Cancel a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListsCancelExportListJobAsync (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Cancel a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListsCancelExportListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ListCheckDetail</returns>
        System.Threading.Tasks.Task<ListCheckDetail> ListsCheckListLatestUpdateSyncAsync (string dataViewName, int? listId, CheckListDetails checkListDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (ListCheckDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCheckDetail>> ListsCheckListLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? listId, CheckListDetails checkListDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <returns>Task of ListCalculateJobDetail</returns>
        System.Threading.Tasks.Task<ListCalculateJobDetail> ListsCreateCalculateListJobForLatestUpdateAsync (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null);

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <returns>Task of ApiResponse (ListCalculateJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCalculateJobDetail>> ListsCreateCalculateListJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null);
        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <returns>Task of ListCheckJobDetail</returns>
        System.Threading.Tasks.Task<ListCheckJobDetail> ListsCreateCheckListJobForLatestUpdateAsync (string dataViewName, int? listId, CheckListDetails checkListDetails = null);

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <returns>Task of ApiResponse (ListCheckJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCheckJobDetail>> ListsCreateCheckListJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? listId, CheckListDetails checkListDetails = null);
        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for exporting this list. (optional)</param>
        /// <returns>Task of ListExportJobDetail</returns>
        System.Threading.Tasks.Task<ListExportJobDetail> ListsCreateExportListJobForLatestUpdateAsync (string dataViewName, int? listId, ExportListDetails exportListDetails = null);

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for exporting this list. (optional)</param>
        /// <returns>Task of ApiResponse (ListExportJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListExportJobDetail>> ListsCreateExportListJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? listId, ExportListDetails exportListDetails = null);
        /// <summary>
        /// Creates a new list from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listDetail">The details for the list to create.  If you want              to update a specific list then PUT to the /Lists/{listId} URL (optional)</param>
        /// <returns>Task of ListDetail</returns>
        System.Threading.Tasks.Task<ListDetail> ListsCreateListAsync (string dataViewName, CreateListDetail listDetail = null);

        /// <summary>
        /// Creates a new list from the given details for the logged in user.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listDetail">The details for the list to create.  If you want              to update a specific list then PUT to the /Lists/{listId} URL (optional)</param>
        /// <returns>Task of ApiResponse (ListDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDetail>> ListsCreateListAsyncWithHttpInfo (string dataViewName, CreateListDetail listDetail = null);
        /// <summary>
        /// Register a hit (view) for the given list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to register the hit for</param>
        /// <param name="createListHitDetails">Details to register the hit with (optional)</param>
        /// <returns>Task of CollectionHitDetail</returns>
        System.Threading.Tasks.Task<CollectionHitDetail> ListsCreateListHitForListAsync (string dataViewName, int? listId, CreateListHitDetails createListHitDetails = null);

        /// <summary>
        /// Register a hit (view) for the given list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to register the hit for</param>
        /// <param name="createListHitDetails">Details to register the hit with (optional)</param>
        /// <returns>Task of ApiResponse (CollectionHitDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionHitDetail>> ListsCreateListHitForListAsyncWithHttpInfo (string dataViewName, int? listId, CreateListHitDetails createListHitDetails = null);
        /// <summary>
        /// Updates the details of a particular list.  If you don&#39;t have an id for the  list then POST to the /Lists URL to create a new list.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to add/update</param>
        /// <param name="createListUpdate">The details for the list to add/update (optional)</param>
        /// <returns>Task of ListUpdateDetail</returns>
        System.Threading.Tasks.Task<ListUpdateDetail> ListsCreateListUpdateAsync (string dataViewName, int? listId, CreateListUpdate createListUpdate = null);

        /// <summary>
        /// Updates the details of a particular list.  If you don&#39;t have an id for the  list then POST to the /Lists URL to create a new list.
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to add/update</param>
        /// <param name="createListUpdate">The details for the list to add/update (optional)</param>
        /// <returns>Task of ApiResponse (ListUpdateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUpdateDetail>> ListsCreateListUpdateAsyncWithHttpInfo (string dataViewName, int? listId, CreateListUpdate createListUpdate = null);
        /// <summary>
        /// Deletes the specified list
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ListsDeleteListAsync (string dataViewName, int? listId);

        /// <summary>
        /// Deletes the specified list
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListsDeleteListAsyncWithHttpInfo (string dataViewName, int? listId);
        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ListExportDetail</returns>
        System.Threading.Tasks.Task<ListExportDetail> ListsExportListLatestUpdateSyncAsync (string dataViewName, int? listId, ExportListDetails exportListDetails = null, int? timeoutInSeconds = null);

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result
        /// </summary>
        /// <remarks>
        /// Might require licence flags [Export]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (ListExportDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListExportDetail>> ListsExportListLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? listId, ExportListDetails exportListDetails = null, int? timeoutInSeconds = null);
        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ListCalculateJobDetail</returns>
        System.Threading.Tasks.Task<ListCalculateJobDetail> ListsGetCalculateListJobAsync (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Get the status of a running calculate job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ListCalculateJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCalculateJobDetail>> ListsGetCalculateListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Get the status of a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ListCheckJobDetail</returns>
        System.Threading.Tasks.Task<ListCheckJobDetail> ListsGetCheckListJobAsync (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Get the status of a running check job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ListCheckJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCheckJobDetail>> ListsGetCheckListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Get the status of a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ListExportJobDetail</returns>
        System.Threading.Tasks.Task<ListExportJobDetail> ListsGetExportListJobAsync (string dataViewName, int? listId, int? jobId);

        /// <summary>
        /// Get the status of a running export job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ListExportJobDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListExportJobDetail>> ListsGetExportListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId);
        /// <summary>
        /// Returns the details of a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ListDetail</returns>
        System.Threading.Tasks.Task<ListDetail> ListsGetListAsync (string dataViewName, int? listId, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Returns the details of a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (ListDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDetail>> ListsGetListAsyncWithHttpInfo (string dataViewName, int? listId, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Returns details for a given list hit for this list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="listHitId">The id of the hit</param>
        /// <returns>Task of CollectionHitDetail</returns>
        System.Threading.Tasks.Task<CollectionHitDetail> ListsGetListHitForListAsync (string dataViewName, int? listId, int? listHitId);

        /// <summary>
        /// Returns details for a given list hit for this list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="listHitId">The id of the hit</param>
        /// <returns>Task of ApiResponse (CollectionHitDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionHitDetail>> ListsGetListHitForListAsyncWithHttpInfo (string dataViewName, int? listId, int? listHitId);
        /// <summary>
        /// Returns a summary of the hits for this list - i.e. information about when users have viewed the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsListHitSummary</returns>
        System.Threading.Tasks.Task<PagedResultsListHitSummary> ListsGetListHitsForListAsync (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the hits for this list - i.e. information about when users have viewed the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsListHitSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsListHitSummary>> ListsGetListHitsForListAsyncWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ListsGetListLatestNativeForNettQueryAsync (string dataViewName, int? listId);

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ListsGetListLatestNativeForNettQueryAsyncWithHttpInfo (string dataViewName, int? listId);
        /// <summary>
        /// Returns details of a particular result for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the results for</param>
        /// <param name="listResultId">The id of the result for the list</param>
        /// <returns>Task of ListResultDetail</returns>
        System.Threading.Tasks.Task<ListResultDetail> ListsGetListResultAsync (string dataViewName, int? listId, int? listResultId);

        /// <summary>
        /// Returns details of a particular result for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the results for</param>
        /// <param name="listResultId">The id of the result for the list</param>
        /// <returns>Task of ApiResponse (ListResultDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListResultDetail>> ListsGetListResultAsyncWithHttpInfo (string dataViewName, int? listId, int? listResultId);
        /// <summary>
        /// Returns a summary of the results for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the list of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsListResultSummary</returns>
        System.Threading.Tasks.Task<PagedResultsListResultSummary> ListsGetListResultsAsync (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the results for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the list of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsListResultSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsListResultSummary>> ListsGetListResultsAsyncWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Returns details of an update for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that contains the update</param>
        /// <param name="listUpdateId">The id of the update for the list</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ListUpdateDetail</returns>
        System.Threading.Tasks.Task<ListUpdateDetail> ListsGetListUpdateAsync (string dataViewName, int? listId, int? listUpdateId, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Returns details of an update for a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that contains the update</param>
        /// <param name="listUpdateId">The id of the update for the list</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (ListUpdateDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUpdateDetail>> ListsGetListUpdateAsyncWithHttpInfo (string dataViewName, int? listId, int? listUpdateId, bool? includeQueries = null, bool? includeBrief = null);
        /// <summary>
        /// Returns a summary of the updates to a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsListUpdateSummary</returns>
        System.Threading.Tasks.Task<PagedResultsListUpdateSummary> ListsGetListUpdatesAsync (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Returns a summary of the updates to a particular list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsListUpdateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsListUpdateSummary>> ListsGetListUpdatesAsyncWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Gets summary information about each list in the DataView.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted lists, not deleted lists or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsListSummary</returns>
        System.Threading.Tasks.Task<PagedResultsListSummary> ListsGetListsAsync (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);

        /// <summary>
        /// Gets summary information about each list in the DataView.  This endpoint is only available for admin users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted lists, not deleted lists or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsListSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResultsListSummary>> ListsGetListsAsyncWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null);
        /// <summary>
        /// Transfer ownership of a list from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the list. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ListDetail</returns>
        System.Threading.Tasks.Task<ListDetail> ListsTransferListOwnershipAsync (string dataViewName, int? listId, TransferListOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null);

        /// <summary>
        /// Transfer ownership of a list from the current user to a new owner
        /// </summary>
        /// <remarks>
        /// Requires licence flags [ListSelection]
        /// </remarks>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the list. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (ListDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDetail>> ListsTransferListOwnershipAsyncWithHttpInfo (string dataViewName, int? listId, TransferListOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListsApi : IListsApi
    {
        private Apteco.ApiSystemAnalyser.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Apteco.ApiSystemAnalyser.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Apteco.ApiSystemAnalyser.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Apteco.ApiSystemAnalyser.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ListResultDetail</returns>
        public ListResultDetail ListsCalculateListLatestUpdateSync (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<ListResultDetail> localVarResponse = ListsCalculateListLatestUpdateSyncWithHttpInfo(dataViewName, listId, calculateListDetails, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of ListResultDetail</returns>
        public ApiResponse< ListResultDetail > ListsCalculateListLatestUpdateSyncWithHttpInfo (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCalculateListLatestUpdateSync");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCalculateListLatestUpdateSync");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CalculateSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (calculateListDetails != null && calculateListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(calculateListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCalculateListLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListResultDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListResultDetail)));
        }

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ListResultDetail</returns>
        public async System.Threading.Tasks.Task<ListResultDetail> ListsCalculateListLatestUpdateSyncAsync (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<ListResultDetail> localVarResponse = await ListsCalculateListLatestUpdateSyncAsyncWithHttpInfo(dataViewName, listId, calculateListDetails, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (ListResultDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListResultDetail>> ListsCalculateListLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCalculateListLatestUpdateSync");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCalculateListLatestUpdateSync");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CalculateSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (calculateListDetails != null && calculateListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(calculateListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCalculateListLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListResultDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListResultDetail)));
        }

        /// <summary>
        /// Cancel a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void ListsCancelCalculateListJob (string dataViewName, int? listId, int? jobId)
        {
             ListsCancelCalculateListJobWithHttpInfo(dataViewName, listId, jobId);
        }

        /// <summary>
        /// Cancel a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListsCancelCalculateListJobWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCancelCalculateListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCancelCalculateListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsCancelCalculateListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCancelCalculateListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListsCancelCalculateListJobAsync (string dataViewName, int? listId, int? jobId)
        {
             await ListsCancelCalculateListJobAsyncWithHttpInfo(dataViewName, listId, jobId);

        }

        /// <summary>
        /// Cancel a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListsCancelCalculateListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCancelCalculateListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCancelCalculateListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsCancelCalculateListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCancelCalculateListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running check job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void ListsCancelCheckListJob (string dataViewName, int? listId, int? jobId)
        {
             ListsCancelCheckListJobWithHttpInfo(dataViewName, listId, jobId);
        }

        /// <summary>
        /// Cancel a running check job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListsCancelCheckListJobWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCancelCheckListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCancelCheckListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsCancelCheckListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CheckJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCancelCheckListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running check job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListsCancelCheckListJobAsync (string dataViewName, int? listId, int? jobId)
        {
             await ListsCancelCheckListJobAsyncWithHttpInfo(dataViewName, listId, jobId);

        }

        /// <summary>
        /// Cancel a running check job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListsCancelCheckListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCancelCheckListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCancelCheckListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsCancelCheckListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CheckJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCancelCheckListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running export job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns></returns>
        public void ListsCancelExportListJob (string dataViewName, int? listId, int? jobId)
        {
             ListsCancelExportListJobWithHttpInfo(dataViewName, listId, jobId);
        }

        /// <summary>
        /// Cancel a running export job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListsCancelExportListJobWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCancelExportListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCancelExportListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsCancelExportListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/ExportJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCancelExportListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a running export job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListsCancelExportListJobAsync (string dataViewName, int? listId, int? jobId)
        {
             await ListsCancelExportListJobAsyncWithHttpInfo(dataViewName, listId, jobId);

        }

        /// <summary>
        /// Cancel a running export job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to cancel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListsCancelExportListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCancelExportListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCancelExportListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsCancelExportListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/ExportJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCancelExportListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ListCheckDetail</returns>
        public ListCheckDetail ListsCheckListLatestUpdateSync (string dataViewName, int? listId, CheckListDetails checkListDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<ListCheckDetail> localVarResponse = ListsCheckListLatestUpdateSyncWithHttpInfo(dataViewName, listId, checkListDetails, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of ListCheckDetail</returns>
        public ApiResponse< ListCheckDetail > ListsCheckListLatestUpdateSyncWithHttpInfo (string dataViewName, int? listId, CheckListDetails checkListDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCheckListLatestUpdateSync");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCheckListLatestUpdateSync");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CheckSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (checkListDetails != null && checkListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCheckListLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCheckDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCheckDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCheckDetail)));
        }

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ListCheckDetail</returns>
        public async System.Threading.Tasks.Task<ListCheckDetail> ListsCheckListLatestUpdateSyncAsync (string dataViewName, int? listId, CheckListDetails checkListDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<ListCheckDetail> localVarResponse = await ListsCheckListLatestUpdateSyncAsyncWithHttpInfo(dataViewName, listId, checkListDetails, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (ListCheckDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCheckDetail>> ListsCheckListLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? listId, CheckListDetails checkListDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCheckListLatestUpdateSync");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCheckListLatestUpdateSync");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CheckSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (checkListDetails != null && checkListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCheckListLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCheckDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCheckDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCheckDetail)));
        }

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <returns>ListCalculateJobDetail</returns>
        public ListCalculateJobDetail ListsCreateCalculateListJobForLatestUpdate (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null)
        {
             ApiResponse<ListCalculateJobDetail> localVarResponse = ListsCreateCalculateListJobForLatestUpdateWithHttpInfo(dataViewName, listId, calculateListDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <returns>ApiResponse of ListCalculateJobDetail</returns>
        public ApiResponse< ListCalculateJobDetail > ListsCreateCalculateListJobForLatestUpdateWithHttpInfo (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateCalculateListJobForLatestUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateCalculateListJobForLatestUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (calculateListDetails != null && calculateListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(calculateListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateCalculateListJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCalculateJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCalculateJobDetail)));
        }

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <returns>Task of ListCalculateJobDetail</returns>
        public async System.Threading.Tasks.Task<ListCalculateJobDetail> ListsCreateCalculateListJobForLatestUpdateAsync (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null)
        {
             ApiResponse<ListCalculateJobDetail> localVarResponse = await ListsCreateCalculateListJobForLatestUpdateAsyncWithHttpInfo(dataViewName, listId, calculateListDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to calculate counts against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to produce the end result 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="calculateListDetails">The details for calculating this list. (optional)</param>
        /// <returns>Task of ApiResponse (ListCalculateJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCalculateJobDetail>> ListsCreateCalculateListJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? listId, CalculateListDetails calculateListDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateCalculateListJobForLatestUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateCalculateListJobForLatestUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CalculateJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (calculateListDetails != null && calculateListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(calculateListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateCalculateListJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCalculateJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCalculateJobDetail)));
        }

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <returns>ListCheckJobDetail</returns>
        public ListCheckJobDetail ListsCreateCheckListJobForLatestUpdate (string dataViewName, int? listId, CheckListDetails checkListDetails = null)
        {
             ApiResponse<ListCheckJobDetail> localVarResponse = ListsCreateCheckListJobForLatestUpdateWithHttpInfo(dataViewName, listId, checkListDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <returns>ApiResponse of ListCheckJobDetail</returns>
        public ApiResponse< ListCheckJobDetail > ListsCreateCheckListJobForLatestUpdateWithHttpInfo (string dataViewName, int? listId, CheckListDetails checkListDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateCheckListJobForLatestUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateCheckListJobForLatestUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CheckJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (checkListDetails != null && checkListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateCheckListJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCheckJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCheckJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCheckJobDetail)));
        }

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <returns>Task of ListCheckJobDetail</returns>
        public async System.Threading.Tasks.Task<ListCheckJobDetail> ListsCreateCheckListJobForLatestUpdateAsync (string dataViewName, int? listId, CheckListDetails checkListDetails = null)
        {
             ApiResponse<ListCheckJobDetail> localVarResponse = await ListsCreateCheckListJobForLatestUpdateAsyncWithHttpInfo(dataViewName, listId, checkListDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to calculate check statistics against the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to calculate the result for.</param>
        /// <param name="checkListDetails">The details for checking this list. (optional)</param>
        /// <returns>Task of ApiResponse (ListCheckJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCheckJobDetail>> ListsCreateCheckListJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? listId, CheckListDetails checkListDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateCheckListJobForLatestUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateCheckListJobForLatestUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CheckJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (checkListDetails != null && checkListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateCheckListJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCheckJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCheckJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCheckJobDetail)));
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for exporting this list. (optional)</param>
        /// <returns>ListExportJobDetail</returns>
        public ListExportJobDetail ListsCreateExportListJobForLatestUpdate (string dataViewName, int? listId, ExportListDetails exportListDetails = null)
        {
             ApiResponse<ListExportJobDetail> localVarResponse = ListsCreateExportListJobForLatestUpdateWithHttpInfo(dataViewName, listId, exportListDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for exporting this list. (optional)</param>
        /// <returns>ApiResponse of ListExportJobDetail</returns>
        public ApiResponse< ListExportJobDetail > ListsCreateExportListJobForLatestUpdateWithHttpInfo (string dataViewName, int? listId, ExportListDetails exportListDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateExportListJobForLatestUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateExportListJobForLatestUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/ExportJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (exportListDetails != null && exportListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(exportListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateExportListJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListExportJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListExportJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListExportJobDetail)));
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for exporting this list. (optional)</param>
        /// <returns>Task of ListExportJobDetail</returns>
        public async System.Threading.Tasks.Task<ListExportJobDetail> ListsCreateExportListJobForLatestUpdateAsync (string dataViewName, int? listId, ExportListDetails exportListDetails = null)
        {
             ApiResponse<ListExportJobDetail> localVarResponse = await ListsCreateExportListJobForLatestUpdateAsyncWithHttpInfo(dataViewName, listId, exportListDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for exporting this list. (optional)</param>
        /// <returns>Task of ApiResponse (ListExportJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListExportJobDetail>> ListsCreateExportListJobForLatestUpdateAsyncWithHttpInfo (string dataViewName, int? listId, ExportListDetails exportListDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateExportListJobForLatestUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateExportListJobForLatestUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/ExportJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (exportListDetails != null && exportListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(exportListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateExportListJobForLatestUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListExportJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListExportJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListExportJobDetail)));
        }

        /// <summary>
        /// Creates a new list from the given details for the logged in user. Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listDetail">The details for the list to create.  If you want              to update a specific list then PUT to the /Lists/{listId} URL (optional)</param>
        /// <returns>ListDetail</returns>
        public ListDetail ListsCreateList (string dataViewName, CreateListDetail listDetail = null)
        {
             ApiResponse<ListDetail> localVarResponse = ListsCreateListWithHttpInfo(dataViewName, listDetail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new list from the given details for the logged in user. Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listDetail">The details for the list to create.  If you want              to update a specific list then PUT to the /Lists/{listId} URL (optional)</param>
        /// <returns>ApiResponse of ListDetail</returns>
        public ApiResponse< ListDetail > ListsCreateListWithHttpInfo (string dataViewName, CreateListDetail listDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateList");

            var localVarPath = "./{dataViewName}/Lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listDetail != null && listDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDetail)));
        }

        /// <summary>
        /// Creates a new list from the given details for the logged in user. Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listDetail">The details for the list to create.  If you want              to update a specific list then PUT to the /Lists/{listId} URL (optional)</param>
        /// <returns>Task of ListDetail</returns>
        public async System.Threading.Tasks.Task<ListDetail> ListsCreateListAsync (string dataViewName, CreateListDetail listDetail = null)
        {
             ApiResponse<ListDetail> localVarResponse = await ListsCreateListAsyncWithHttpInfo(dataViewName, listDetail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new list from the given details for the logged in user. Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listDetail">The details for the list to create.  If you want              to update a specific list then PUT to the /Lists/{listId} URL (optional)</param>
        /// <returns>Task of ApiResponse (ListDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListDetail>> ListsCreateListAsyncWithHttpInfo (string dataViewName, CreateListDetail listDetail = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateList");

            var localVarPath = "./{dataViewName}/Lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listDetail != null && listDetail.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(listDetail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = listDetail; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDetail)));
        }

        /// <summary>
        /// Register a hit (view) for the given list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to register the hit for</param>
        /// <param name="createListHitDetails">Details to register the hit with (optional)</param>
        /// <returns>CollectionHitDetail</returns>
        public CollectionHitDetail ListsCreateListHitForList (string dataViewName, int? listId, CreateListHitDetails createListHitDetails = null)
        {
             ApiResponse<CollectionHitDetail> localVarResponse = ListsCreateListHitForListWithHttpInfo(dataViewName, listId, createListHitDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a hit (view) for the given list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to register the hit for</param>
        /// <param name="createListHitDetails">Details to register the hit with (optional)</param>
        /// <returns>ApiResponse of CollectionHitDetail</returns>
        public ApiResponse< CollectionHitDetail > ListsCreateListHitForListWithHttpInfo (string dataViewName, int? listId, CreateListHitDetails createListHitDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateListHitForList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateListHitForList");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (createListHitDetails != null && createListHitDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createListHitDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListHitDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateListHitForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CollectionHitDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionHitDetail)));
        }

        /// <summary>
        /// Register a hit (view) for the given list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to register the hit for</param>
        /// <param name="createListHitDetails">Details to register the hit with (optional)</param>
        /// <returns>Task of CollectionHitDetail</returns>
        public async System.Threading.Tasks.Task<CollectionHitDetail> ListsCreateListHitForListAsync (string dataViewName, int? listId, CreateListHitDetails createListHitDetails = null)
        {
             ApiResponse<CollectionHitDetail> localVarResponse = await ListsCreateListHitForListAsyncWithHttpInfo(dataViewName, listId, createListHitDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a hit (view) for the given list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to register the hit for</param>
        /// <param name="createListHitDetails">Details to register the hit with (optional)</param>
        /// <returns>Task of ApiResponse (CollectionHitDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionHitDetail>> ListsCreateListHitForListAsyncWithHttpInfo (string dataViewName, int? listId, CreateListHitDetails createListHitDetails = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateListHitForList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateListHitForList");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (createListHitDetails != null && createListHitDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createListHitDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListHitDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateListHitForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CollectionHitDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionHitDetail)));
        }

        /// <summary>
        /// Updates the details of a particular list.  If you don&#39;t have an id for the  list then POST to the /Lists URL to create a new list. Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to add/update</param>
        /// <param name="createListUpdate">The details for the list to add/update (optional)</param>
        /// <returns>ListUpdateDetail</returns>
        public ListUpdateDetail ListsCreateListUpdate (string dataViewName, int? listId, CreateListUpdate createListUpdate = null)
        {
             ApiResponse<ListUpdateDetail> localVarResponse = ListsCreateListUpdateWithHttpInfo(dataViewName, listId, createListUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the details of a particular list.  If you don&#39;t have an id for the  list then POST to the /Lists URL to create a new list. Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to add/update</param>
        /// <param name="createListUpdate">The details for the list to add/update (optional)</param>
        /// <returns>ApiResponse of ListUpdateDetail</returns>
        public ApiResponse< ListUpdateDetail > ListsCreateListUpdateWithHttpInfo (string dataViewName, int? listId, CreateListUpdate createListUpdate = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateListUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateListUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (createListUpdate != null && createListUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createListUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListUpdate; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateListUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListUpdateDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListUpdateDetail)));
        }

        /// <summary>
        /// Updates the details of a particular list.  If you don&#39;t have an id for the  list then POST to the /Lists URL to create a new list. Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to add/update</param>
        /// <param name="createListUpdate">The details for the list to add/update (optional)</param>
        /// <returns>Task of ListUpdateDetail</returns>
        public async System.Threading.Tasks.Task<ListUpdateDetail> ListsCreateListUpdateAsync (string dataViewName, int? listId, CreateListUpdate createListUpdate = null)
        {
             ApiResponse<ListUpdateDetail> localVarResponse = await ListsCreateListUpdateAsyncWithHttpInfo(dataViewName, listId, createListUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the details of a particular list.  If you don&#39;t have an id for the  list then POST to the /Lists URL to create a new list. Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to add/update</param>
        /// <param name="createListUpdate">The details for the list to add/update (optional)</param>
        /// <returns>Task of ApiResponse (ListUpdateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListUpdateDetail>> ListsCreateListUpdateAsyncWithHttpInfo (string dataViewName, int? listId, CreateListUpdate createListUpdate = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsCreateListUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsCreateListUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (createListUpdate != null && createListUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createListUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListUpdate; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsCreateListUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListUpdateDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListUpdateDetail)));
        }

        /// <summary>
        /// Deletes the specified list Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to delete</param>
        /// <returns></returns>
        public void ListsDeleteList (string dataViewName, int? listId)
        {
             ListsDeleteListWithHttpInfo(dataViewName, listId);
        }

        /// <summary>
        /// Deletes the specified list Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ListsDeleteListWithHttpInfo (string dataViewName, int? listId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsDeleteList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsDeleteList");

            var localVarPath = "./{dataViewName}/Lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsDeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified list Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ListsDeleteListAsync (string dataViewName, int? listId)
        {
             await ListsDeleteListAsyncWithHttpInfo(dataViewName, listId);

        }

        /// <summary>
        /// Deletes the specified list Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ListsDeleteListAsyncWithHttpInfo (string dataViewName, int? listId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsDeleteList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsDeleteList");

            var localVarPath = "./{dataViewName}/Lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsDeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ListExportDetail</returns>
        public ListExportDetail ListsExportListLatestUpdateSync (string dataViewName, int? listId, ExportListDetails exportListDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<ListExportDetail> localVarResponse = ListsExportListLatestUpdateSyncWithHttpInfo(dataViewName, listId, exportListDetails, timeoutInSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>ApiResponse of ListExportDetail</returns>
        public ApiResponse< ListExportDetail > ListsExportListLatestUpdateSyncWithHttpInfo (string dataViewName, int? listId, ExportListDetails exportListDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsExportListLatestUpdateSync");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsExportListLatestUpdateSync");

            var localVarPath = "./{dataViewName}/Lists/{listId}/ExportSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (exportListDetails != null && exportListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(exportListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsExportListLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListExportDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListExportDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListExportDetail)));
        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ListExportDetail</returns>
        public async System.Threading.Tasks.Task<ListExportDetail> ListsExportListLatestUpdateSyncAsync (string dataViewName, int? listId, ExportListDetails exportListDetails = null, int? timeoutInSeconds = null)
        {
             ApiResponse<ListExportDetail> localVarResponse = await ListsExportListLatestUpdateSyncAsyncWithHttpInfo(dataViewName, listId, exportListDetails, timeoutInSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job to export data from the FastStats system for the latest version of this list.  The different queries associated with the latest  version of this list will be combined to identify the data to export and the specified columns will be used to export the data, to a file  and/or as a sample within the body of the result Might require licence flags [Export]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to export data for.</param>
        /// <param name="exportListDetails">The details for calculating this list. (optional)</param>
        /// <param name="timeoutInSeconds">The number of seconds before the request will time out.  Leave unspecified to use the default value given in the list service&#39;s configuration (optional)</param>
        /// <returns>Task of ApiResponse (ListExportDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListExportDetail>> ListsExportListLatestUpdateSyncAsyncWithHttpInfo (string dataViewName, int? listId, ExportListDetails exportListDetails = null, int? timeoutInSeconds = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsExportListLatestUpdateSync");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsExportListLatestUpdateSync");

            var localVarPath = "./{dataViewName}/Lists/{listId}/ExportSync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (timeoutInSeconds != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeoutInSeconds", timeoutInSeconds)); // query parameter
            if (exportListDetails != null && exportListDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(exportListDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exportListDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsExportListLatestUpdateSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListExportDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListExportDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListExportDetail)));
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ListCalculateJobDetail</returns>
        public ListCalculateJobDetail ListsGetCalculateListJob (string dataViewName, int? listId, int? jobId)
        {
             ApiResponse<ListCalculateJobDetail> localVarResponse = ListsGetCalculateListJobWithHttpInfo(dataViewName, listId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ListCalculateJobDetail</returns>
        public ApiResponse< ListCalculateJobDetail > ListsGetCalculateListJobWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetCalculateListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetCalculateListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsGetCalculateListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetCalculateListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCalculateJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCalculateJobDetail)));
        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ListCalculateJobDetail</returns>
        public async System.Threading.Tasks.Task<ListCalculateJobDetail> ListsGetCalculateListJobAsync (string dataViewName, int? listId, int? jobId)
        {
             ApiResponse<ListCalculateJobDetail> localVarResponse = await ListsGetCalculateListJobAsyncWithHttpInfo(dataViewName, listId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running calculate job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the calculate job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ListCalculateJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCalculateJobDetail>> ListsGetCalculateListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetCalculateListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetCalculateListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsGetCalculateListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CalculateJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetCalculateListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCalculateJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCalculateJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCalculateJobDetail)));
        }

        /// <summary>
        /// Get the status of a running check job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ListCheckJobDetail</returns>
        public ListCheckJobDetail ListsGetCheckListJob (string dataViewName, int? listId, int? jobId)
        {
             ApiResponse<ListCheckJobDetail> localVarResponse = ListsGetCheckListJobWithHttpInfo(dataViewName, listId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running check job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ListCheckJobDetail</returns>
        public ApiResponse< ListCheckJobDetail > ListsGetCheckListJobWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetCheckListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetCheckListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsGetCheckListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CheckJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetCheckListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCheckJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCheckJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCheckJobDetail)));
        }

        /// <summary>
        /// Get the status of a running check job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ListCheckJobDetail</returns>
        public async System.Threading.Tasks.Task<ListCheckJobDetail> ListsGetCheckListJobAsync (string dataViewName, int? listId, int? jobId)
        {
             ApiResponse<ListCheckJobDetail> localVarResponse = await ListsGetCheckListJobAsyncWithHttpInfo(dataViewName, listId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running check job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the check job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ListCheckJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCheckJobDetail>> ListsGetCheckListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetCheckListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetCheckListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsGetCheckListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/CheckJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetCheckListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCheckJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListCheckJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCheckJobDetail)));
        }

        /// <summary>
        /// Get the status of a running export job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ListExportJobDetail</returns>
        public ListExportJobDetail ListsGetExportListJob (string dataViewName, int? listId, int? jobId)
        {
             ApiResponse<ListExportJobDetail> localVarResponse = ListsGetExportListJobWithHttpInfo(dataViewName, listId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a running export job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>ApiResponse of ListExportJobDetail</returns>
        public ApiResponse< ListExportJobDetail > ListsGetExportListJobWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetExportListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetExportListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsGetExportListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/ExportJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetExportListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListExportJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListExportJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListExportJobDetail)));
        }

        /// <summary>
        /// Get the status of a running export job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ListExportJobDetail</returns>
        public async System.Threading.Tasks.Task<ListExportJobDetail> ListsGetExportListJobAsync (string dataViewName, int? listId, int? jobId)
        {
             ApiResponse<ListExportJobDetail> localVarResponse = await ListsGetExportListJobAsyncWithHttpInfo(dataViewName, listId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a running export job 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that the export job is running for.</param>
        /// <param name="jobId">The id of the job to get the status for.</param>
        /// <returns>Task of ApiResponse (ListExportJobDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListExportJobDetail>> ListsGetExportListJobAsyncWithHttpInfo (string dataViewName, int? listId, int? jobId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetExportListJob");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetExportListJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ListsApi->ListsGetExportListJob");

            var localVarPath = "./{dataViewName}/Lists/{listId}/ExportJobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetExportListJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListExportJobDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListExportJobDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListExportJobDetail)));
        }

        /// <summary>
        /// Returns the details of a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ListDetail</returns>
        public ListDetail ListsGetList (string dataViewName, int? listId, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<ListDetail> localVarResponse = ListsGetListWithHttpInfo(dataViewName, listId, includeQueries, includeBrief);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details of a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of ListDetail</returns>
        public ApiResponse< ListDetail > ListsGetListWithHttpInfo (string dataViewName, int? listId, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetList");

            var localVarPath = "./{dataViewName}/Lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDetail)));
        }

        /// <summary>
        /// Returns the details of a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ListDetail</returns>
        public async System.Threading.Tasks.Task<ListDetail> ListsGetListAsync (string dataViewName, int? listId, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<ListDetail> localVarResponse = await ListsGetListAsyncWithHttpInfo(dataViewName, listId, includeQueries, includeBrief);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details of a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to view</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (ListDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListDetail>> ListsGetListAsyncWithHttpInfo (string dataViewName, int? listId, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetList");

            var localVarPath = "./{dataViewName}/Lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDetail)));
        }

        /// <summary>
        /// Returns details for a given list hit for this list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="listHitId">The id of the hit</param>
        /// <returns>CollectionHitDetail</returns>
        public CollectionHitDetail ListsGetListHitForList (string dataViewName, int? listId, int? listHitId)
        {
             ApiResponse<CollectionHitDetail> localVarResponse = ListsGetListHitForListWithHttpInfo(dataViewName, listId, listHitId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details for a given list hit for this list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="listHitId">The id of the hit</param>
        /// <returns>ApiResponse of CollectionHitDetail</returns>
        public ApiResponse< CollectionHitDetail > ListsGetListHitForListWithHttpInfo (string dataViewName, int? listId, int? listHitId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListHitForList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListHitForList");
            // verify the required parameter 'listHitId' is set
            if (listHitId == null)
                throw new ApiException(400, "Missing required parameter 'listHitId' when calling ListsApi->ListsGetListHitForList");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Hits/{listHitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (listHitId != null) localVarPathParams.Add("listHitId", Configuration.ApiClient.ParameterToString(listHitId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListHitForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CollectionHitDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionHitDetail)));
        }

        /// <summary>
        /// Returns details for a given list hit for this list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="listHitId">The id of the hit</param>
        /// <returns>Task of CollectionHitDetail</returns>
        public async System.Threading.Tasks.Task<CollectionHitDetail> ListsGetListHitForListAsync (string dataViewName, int? listId, int? listHitId)
        {
             ApiResponse<CollectionHitDetail> localVarResponse = await ListsGetListHitForListAsyncWithHttpInfo(dataViewName, listId, listHitId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details for a given list hit for this list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="listHitId">The id of the hit</param>
        /// <returns>Task of ApiResponse (CollectionHitDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionHitDetail>> ListsGetListHitForListAsyncWithHttpInfo (string dataViewName, int? listId, int? listHitId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListHitForList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListHitForList");
            // verify the required parameter 'listHitId' is set
            if (listHitId == null)
                throw new ApiException(400, "Missing required parameter 'listHitId' when calling ListsApi->ListsGetListHitForList");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Hits/{listHitId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (listHitId != null) localVarPathParams.Add("listHitId", Configuration.ApiClient.ParameterToString(listHitId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListHitForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionHitDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CollectionHitDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionHitDetail)));
        }

        /// <summary>
        /// Returns a summary of the hits for this list - i.e. information about when users have viewed the list. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsListHitSummary</returns>
        public PagedResultsListHitSummary ListsGetListHitsForList (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsListHitSummary> localVarResponse = ListsGetListHitsForListWithHttpInfo(dataViewName, listId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the hits for this list - i.e. information about when users have viewed the list. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsListHitSummary</returns>
        public ApiResponse< PagedResultsListHitSummary > ListsGetListHitsForListWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListHitsForList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListHitsForList");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListHitsForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsListHitSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsListHitSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsListHitSummary)));
        }

        /// <summary>
        /// Returns a summary of the hits for this list - i.e. information about when users have viewed the list. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsListHitSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsListHitSummary> ListsGetListHitsForListAsync (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsListHitSummary> localVarResponse = await ListsGetListHitsForListAsyncWithHttpInfo(dataViewName, listId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the hits for this list - i.e. information about when users have viewed the list. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the hit information for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Username, Timestamp, UserAgentDetails (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsListHitSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsListHitSummary>> ListsGetListHitsForListAsyncWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListHitsForList");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListHitsForList");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Hits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListHitsForList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsListHitSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsListHitSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsListHitSummary)));
        }

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list</param>
        /// <returns>string</returns>
        public string ListsGetListLatestNativeForNettQuery (string dataViewName, int? listId)
        {
             ApiResponse<string> localVarResponse = ListsGetListLatestNativeForNettQueryWithHttpInfo(dataViewName, listId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ListsGetListLatestNativeForNettQueryWithHttpInfo (string dataViewName, int? listId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListLatestNativeForNettQuery");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListLatestNativeForNettQuery");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Native/Nett";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListLatestNativeForNettQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ListsGetListLatestNativeForNettQueryAsync (string dataViewName, int? listId)
        {
             ApiResponse<string> localVarResponse = await ListsGetListLatestNativeForNettQueryAsyncWithHttpInfo(dataViewName, listId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ListsGetListLatestNativeForNettQueryAsyncWithHttpInfo (string dataViewName, int? listId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListLatestNativeForNettQuery");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListLatestNativeForNettQuery");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Native/Nett";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/xml",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListLatestNativeForNettQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Returns details of a particular result for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the results for</param>
        /// <param name="listResultId">The id of the result for the list</param>
        /// <returns>ListResultDetail</returns>
        public ListResultDetail ListsGetListResult (string dataViewName, int? listId, int? listResultId)
        {
             ApiResponse<ListResultDetail> localVarResponse = ListsGetListResultWithHttpInfo(dataViewName, listId, listResultId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of a particular result for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the results for</param>
        /// <param name="listResultId">The id of the result for the list</param>
        /// <returns>ApiResponse of ListResultDetail</returns>
        public ApiResponse< ListResultDetail > ListsGetListResultWithHttpInfo (string dataViewName, int? listId, int? listResultId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListResult");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListResult");
            // verify the required parameter 'listResultId' is set
            if (listResultId == null)
                throw new ApiException(400, "Missing required parameter 'listResultId' when calling ListsApi->ListsGetListResult");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Results/{listResultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (listResultId != null) localVarPathParams.Add("listResultId", Configuration.ApiClient.ParameterToString(listResultId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListResultDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListResultDetail)));
        }

        /// <summary>
        /// Returns details of a particular result for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the results for</param>
        /// <param name="listResultId">The id of the result for the list</param>
        /// <returns>Task of ListResultDetail</returns>
        public async System.Threading.Tasks.Task<ListResultDetail> ListsGetListResultAsync (string dataViewName, int? listId, int? listResultId)
        {
             ApiResponse<ListResultDetail> localVarResponse = await ListsGetListResultAsyncWithHttpInfo(dataViewName, listId, listResultId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of a particular result for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the results for</param>
        /// <param name="listResultId">The id of the result for the list</param>
        /// <returns>Task of ApiResponse (ListResultDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListResultDetail>> ListsGetListResultAsyncWithHttpInfo (string dataViewName, int? listId, int? listResultId)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListResult");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListResult");
            // verify the required parameter 'listResultId' is set
            if (listResultId == null)
                throw new ApiException(400, "Missing required parameter 'listResultId' when calling ListsApi->ListsGetListResult");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Results/{listResultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (listResultId != null) localVarPathParams.Add("listResultId", Configuration.ApiClient.ParameterToString(listResultId)); // path parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListResultDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListResultDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListResultDetail)));
        }

        /// <summary>
        /// Returns a summary of the results for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the list of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsListResultSummary</returns>
        public PagedResultsListResultSummary ListsGetListResults (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsListResultSummary> localVarResponse = ListsGetListResultsWithHttpInfo(dataViewName, listId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the results for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the list of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsListResultSummary</returns>
        public ApiResponse< PagedResultsListResultSummary > ListsGetListResultsWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListResults");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListResults");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsListResultSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsListResultSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsListResultSummary)));
        }

        /// <summary>
        /// Returns a summary of the results for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the list of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsListResultSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsListResultSummary> ListsGetListResultsAsync (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsListResultSummary> localVarResponse = await ListsGetListResultsAsyncWithHttpInfo(dataViewName, listId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the results for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the list of results for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, ListUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsListResultSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsListResultSummary>> ListsGetListResultsAsyncWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListResults");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListResults");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsListResultSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsListResultSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsListResultSummary)));
        }

        /// <summary>
        /// Returns details of an update for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that contains the update</param>
        /// <param name="listUpdateId">The id of the update for the list</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ListUpdateDetail</returns>
        public ListUpdateDetail ListsGetListUpdate (string dataViewName, int? listId, int? listUpdateId, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<ListUpdateDetail> localVarResponse = ListsGetListUpdateWithHttpInfo(dataViewName, listId, listUpdateId, includeQueries, includeBrief);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details of an update for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that contains the update</param>
        /// <param name="listUpdateId">The id of the update for the list</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of ListUpdateDetail</returns>
        public ApiResponse< ListUpdateDetail > ListsGetListUpdateWithHttpInfo (string dataViewName, int? listId, int? listUpdateId, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListUpdate");
            // verify the required parameter 'listUpdateId' is set
            if (listUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'listUpdateId' when calling ListsApi->ListsGetListUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Updates/{listUpdateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (listUpdateId != null) localVarPathParams.Add("listUpdateId", Configuration.ApiClient.ParameterToString(listUpdateId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListUpdateDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListUpdateDetail)));
        }

        /// <summary>
        /// Returns details of an update for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that contains the update</param>
        /// <param name="listUpdateId">The id of the update for the list</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ListUpdateDetail</returns>
        public async System.Threading.Tasks.Task<ListUpdateDetail> ListsGetListUpdateAsync (string dataViewName, int? listId, int? listUpdateId, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<ListUpdateDetail> localVarResponse = await ListsGetListUpdateAsyncWithHttpInfo(dataViewName, listId, listUpdateId, includeQueries, includeBrief);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details of an update for a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list that contains the update</param>
        /// <param name="listUpdateId">The id of the update for the list</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (ListUpdateDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListUpdateDetail>> ListsGetListUpdateAsyncWithHttpInfo (string dataViewName, int? listId, int? listUpdateId, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListUpdate");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListUpdate");
            // verify the required parameter 'listUpdateId' is set
            if (listUpdateId == null)
                throw new ApiException(400, "Missing required parameter 'listUpdateId' when calling ListsApi->ListsGetListUpdate");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Updates/{listUpdateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (listUpdateId != null) localVarPathParams.Add("listUpdateId", Configuration.ApiClient.ParameterToString(listUpdateId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListUpdateDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListUpdateDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListUpdateDetail)));
        }

        /// <summary>
        /// Returns a summary of the updates to a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsListUpdateSummary</returns>
        public PagedResultsListUpdateSummary ListsGetListUpdates (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsListUpdateSummary> localVarResponse = ListsGetListUpdatesWithHttpInfo(dataViewName, listId, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of the updates to a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsListUpdateSummary</returns>
        public ApiResponse< PagedResultsListUpdateSummary > ListsGetListUpdatesWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListUpdates");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListUpdates");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsListUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsListUpdateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsListUpdateSummary)));
        }

        /// <summary>
        /// Returns a summary of the updates to a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsListUpdateSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsListUpdateSummary> ListsGetListUpdatesAsync (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsListUpdateSummary> localVarResponse = await ListsGetListUpdatesAsyncWithHttpInfo(dataViewName, listId, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a summary of the updates to a particular list 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to get the updates for</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsListUpdateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsListUpdateSummary>> ListsGetListUpdatesAsyncWithHttpInfo (string dataViewName, int? listId, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetListUpdates");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsGetListUpdates");

            var localVarPath = "./{dataViewName}/Lists/{listId}/Updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetListUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsListUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsListUpdateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsListUpdateSummary)));
        }

        /// <summary>
        /// Gets summary information about each list in the DataView.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted lists, not deleted lists or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>PagedResultsListSummary</returns>
        public PagedResultsListSummary ListsGetLists (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsListSummary> localVarResponse = ListsGetListsWithHttpInfo(dataViewName, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets summary information about each list in the DataView.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted lists, not deleted lists or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>ApiResponse of PagedResultsListSummary</returns>
        public ApiResponse< PagedResultsListSummary > ListsGetListsWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetLists");

            var localVarPath = "./{dataViewName}/Lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsListSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsListSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsListSummary)));
        }

        /// <summary>
        /// Gets summary information about each list in the DataView.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted lists, not deleted lists or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of PagedResultsListSummary</returns>
        public async System.Threading.Tasks.Task<PagedResultsListSummary> ListsGetListsAsync (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
             ApiResponse<PagedResultsListSummary> localVarResponse = await ListsGetListsAsyncWithHttpInfo(dataViewName, includeDeleted, filter, orderBy, offset, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets summary information about each list in the DataView.  This endpoint is only available for admin users. 
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="includeDeleted">If specified, whether to include deleted lists, not deleted lists or both.  Defaults to not deleted only (optional)</param>
        /// <param name="filter">Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="orderBy">Order the items by a given field (in ascending order unless the field is preceeded by a \&quot;-\&quot; character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn (optional)</param>
        /// <param name="offset">The number of items to skip in the (potentially filtered) result set before returning subsequent items. (optional)</param>
        /// <param name="count">The maximum number of items to show from the (potentially filtered) result set. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResultsListSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResultsListSummary>> ListsGetListsAsyncWithHttpInfo (string dataViewName, string includeDeleted = null, string filter = null, string orderBy = null, int? offset = null, int? count = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsGetLists");

            var localVarPath = "./{dataViewName}/Lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsGetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResultsListSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PagedResultsListSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResultsListSummary)));
        }

        /// <summary>
        /// Transfer ownership of a list from the current user to a new owner Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the list. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ListDetail</returns>
        public ListDetail ListsTransferListOwnership (string dataViewName, int? listId, TransferListOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<ListDetail> localVarResponse = ListsTransferListOwnershipWithHttpInfo(dataViewName, listId, transferOwnershipDetails, includeQueries, includeBrief);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer ownership of a list from the current user to a new owner Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the list. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>ApiResponse of ListDetail</returns>
        public ApiResponse< ListDetail > ListsTransferListOwnershipWithHttpInfo (string dataViewName, int? listId, TransferListOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsTransferListOwnership");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsTransferListOwnership");

            var localVarPath = "./{dataViewName}/Lists/{listId}/TransferOwnership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (transferOwnershipDetails != null && transferOwnershipDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transferOwnershipDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferOwnershipDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsTransferListOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDetail)));
        }

        /// <summary>
        /// Transfer ownership of a list from the current user to a new owner Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the list. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ListDetail</returns>
        public async System.Threading.Tasks.Task<ListDetail> ListsTransferListOwnershipAsync (string dataViewName, int? listId, TransferListOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null)
        {
             ApiResponse<ListDetail> localVarResponse = await ListsTransferListOwnershipAsyncWithHttpInfo(dataViewName, listId, transferOwnershipDetails, includeQueries, includeBrief);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer ownership of a list from the current user to a new owner Requires licence flags [ListSelection]
        /// </summary>
        /// <exception cref="Apteco.ApiSystemAnalyser.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataViewName">The name of the DataView to act on</param>
        /// <param name="listId">The id of the list to transfer.</param>
        /// <param name="transferOwnershipDetails">The details for transferring ownership of the list. (optional)</param>
        /// <param name="includeQueries">If specified, whether to include the query definitions for the returned list or not.  Defaults to true - to return query definitions (optional)</param>
        /// <param name="includeBrief">If specified, whether to include the brief for this list or not.  Defaults to true - to return the brief (optional)</param>
        /// <returns>Task of ApiResponse (ListDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListDetail>> ListsTransferListOwnershipAsyncWithHttpInfo (string dataViewName, int? listId, TransferListOwnershipDetails transferOwnershipDetails = null, bool? includeQueries = null, bool? includeBrief = null)
        {
            // verify the required parameter 'dataViewName' is set
            if (dataViewName == null)
                throw new ApiException(400, "Missing required parameter 'dataViewName' when calling ListsApi->ListsTransferListOwnership");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->ListsTransferListOwnership");

            var localVarPath = "./{dataViewName}/Lists/{listId}/TransferOwnership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataViewName != null) localVarPathParams.Add("dataViewName", Configuration.ApiClient.ParameterToString(dataViewName)); // path parameter
            if (listId != null) localVarPathParams.Add("listId", Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (includeQueries != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeQueries", includeQueries)); // query parameter
            if (includeBrief != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBrief", includeBrief)); // query parameter
            if (transferOwnershipDetails != null && transferOwnershipDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transferOwnershipDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferOwnershipDetails; // byte array
            }

            // authentication (faststats_auth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListsTransferListOwnership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDetail)));
        }

    }
}
